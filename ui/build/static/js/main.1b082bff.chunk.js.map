{"version":3,"sources":["components/UserProvider.tsx","service.ts","hooks/connections.ts","utils.ts","hooks/questions.ts","hooks/results.ts","hooks/users.ts","pages/Home/index.tsx","pages/Admin/index.tsx","pages/Connections/ConnectionForm.tsx","pages/Connections/ConnectionRow.tsx","pages/Connections/index.tsx","components/Header/NewQuestionForm.tsx","components/Header/NewDashboardForm.tsx","components/GoogleIcon.tsx","components/Header/index.tsx","components/QuestionLastRun.tsx","components/QuestionResultCard/Footer.tsx","components/QuestionResultCard/Value.tsx","components/QuestionResultCard/Result/TableResult.tsx","components/QuestionResultCard/Result/ScalarResult.tsx","components/QuestionResultCard/Result/LineChartResult.tsx","components/QuestionResultCard/Result/BarChartResult.tsx","components/QuestionResultCard/Result/PieChartResult.tsx","components/QuestionResultCard/Result/BubbleChartResult.tsx","components/QuestionResultCard/Result/index.tsx","components/QuestionResultCard/index.tsx","hooks/pagination.ts","components/ColorPicker.tsx","components/ProtectedRoute.tsx","pages/Questions/index.tsx","pages/Question/Toolbar.tsx","pages/Question/QueryEditor.tsx","pages/Question/VisualSettingsForm.tsx","pages/Question/index.tsx","pages/Dashboards/index.tsx","hooks/dashboards.ts","pages/Dashboard/index.tsx","pages/Landing/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GAPI_AVAILABLE","SERVICES","API","process","AUTH","fetchConnectionsAction","method","endpoint","fetchDriversAction","createConnectionAction","body","name","driver","params","dsn","updateConnectionAction","id","createQuestionAction","data","createQuestionExecution","fetchQuestionsAction","fetchLastQuestionExecutionAction","questionId","createDashboardAction","fetchDashboardsAction","loginWithGoogleAction","auth","service","useConnections","shape","useQuery","payload","useQueryReturn","connections","loading","error","undefined","reduce","acc","connection","_id","drivers","map","c","filter","index","self","indexOf","sort","NOOP","DEFAULT_PORT","mongodb","postgresql","formatHosts","metadata","hosts","h","host","port","scheme","join","useQuestions","populatedQuestions","loadingQuestions","errorQuestions","questions","query","loadingConnections","errorConnections","question","connection_id","fetchQuestions","useQuestionSettings","predefinedSettings","result","React","settings","length","datum","Array","isArray","Object","keys","isScalar","type","key","columns","chartSettingsKeys","startsWith","chartSettingKey","axis","column","useQuestion","fetchQuestionAction","loadingQuestion","errorQuestion","useMutation","updateQuestionAction","loadingQuestionUpdate","errorQuestionUpdate","updatedQuestion","updateQuestion","mutate","loadingQuestionExecution","errorQuestionExecution","questionExecution","runQuestion","useClient","setLoading","setError","setConnection","lastExecution","setLastExecution","connectionId","then","connectionResponse","Promise","resolve","executionResponse","catch","e","save","newQuery","run","a","question_id","execution","waiting","errorWaiting","updateSettings","visualSettings","FETCH_TIMEOUT","initResultState","state","initialState","resultReducer","action","userContext","login","logout","useUser","Tutorial","Paper","Box","m","Typography","variant","Divider","Link","target","href","p","Container","open","onClose","setSubmitting","onSuccess","loadingDrivers","errorDrivers","createLoading","createConnection","updateLoading","updateConnection","setName","setDriver","setDsn","username","password","constructDSN","isValid","validate","clearForm","submitConnection","mutationPayload","mutationError","Dialog","DialogTitle","DialogContent","DialogContentText","FormControl","fullWidth","disabled","InputLabel","Select","labelId","value","required","onChange","d","MenuItem","TextField","label","helperText","color","message","LinearProgress","DialogActions","Button","onClick","DriverIcon","alt","src","width","height","onEdit","fetchConnectivityAction","connected","user","TableRow","hover","TableCell","align","CircularProgress","size","owner_id","startIcon","editingConnection","setEditingConnection","submitting","isConnectionFormOpen","setConnectionFormOpen","closeConnectionForm","mb","TableContainer","Table","TableHead","TableBody","ConnectionRow","editConnection","ConnectionForm","fetchConnections","loadingSubmission","createQuestion","connectionDriver","setConnectionDriver","submitQuestion","questionData","display","flexDirection","alignItems","find","availableQuestions","createDashboard","description","setDescription","updateFrequency","setUpdateFrequency","setQuestions","submitDashboard","dashboardData","s","multiline","multiple","input","Input","renderValue","selected","Chip","Title","location","useLocation","path","pathname","split","idx","accPath","theme","useTheme","useMediaQuery","breakpoints","down","Breadcrumbs","page","title","DrawerMenu","navigate","history","useHistory","Drawer","anchor","List","dense","ListItem","push","button","ListItemIcon","ListItemText","primary","useAvatarStyles","makeStyles","createStyles","small","spacing","useMenuStyles","popover","marginTop","HeaderContent","openMenu","openAddNewSelector","openUserMenu","isXS","Toolbar","style","paddingLeft","Grid","container","direction","justify","align-items","IconButton","Avatar","firstName","lastName","picture","className","AddNewSelector","anchorEl","openNewDashboard","openNewQuestion","classes","Popover","keepMounted","anchorOrigin","vertical","horizontal","transformOrigin","UserMenu","HeaderForAuthenticatedUser","addAnchorEl","setAddAnchorEl","userMenuAnchorEl","setUserMenuAnchorEl","isMenuOpen","setIsMenuOpen","isNewQuestionFormOpen","setNewQuestionFormOpen","isNewDashboardFormOpen","setNewDashboardFormOpen","AppBar","position","currentTarget","NewDashboardForm","dashboard","AnonymousHeader","signinAnchor","setSigninAnchor","Menu","GoogleIcon","console","log","Tooltip","ReactTimeAgo","date","Date","created","locale","placement","arrow","getExecutionIcon","children","editable","requestVisualTypeChange","openVisualSettingsForm","props","justifyContent","parseISO","disableFocusListener","fontSize","ToggleButtonGroup","exclusive","event","newType","ToggleButton","ml","collapsed","named","JSON","parse","indentWidth","enableClipboard","displayDataTypes","isValidDate","formatDate","maxHeight","overflowY","rowsPerPage","stickyHeader","slice","row","minWidth","Value","gutterBottom","ChartComponent","asArea","AreaChart","LineChart","CurveComponent","Area","Line","pr","yAxis","x1","y1","x2","y2","offset","stopColor","colors","stopOpacity","strokeDasharray","dataKey","xAxis","cursor","stroke","fillOpacity","fill","nameKey","dataKeys","typedData","typedDatum","parseFloat","cx","cy","innerRadius","outerRadius","xKey","yKey","zKeys","zAxis","zKey","tableProps","ScalarResult","LineChartResult","BarChartResult","PieChartResult","BubbleChartResult","TableResult","initialExecution","onResultUpdate","dispatch","setExecution","newExecution","resultId","setTimeout","executionId","fetchExecutionAction","refetchExecution","results","useResult","rowsPerPageOptions","setPage","setRowsPerPage","handleChangePage","newPage","handleChangeRowsPerPage","parseInt","usePagination","Result","TablePagination","component","Footer","count","onChangePage","onChangeRowsPerPage","labelRowsPerPage","labelDisplayedRows","ColorIcon","iconStyle","marginLeft","setAnchorEl","buttonStyle","borderColor","item","onChangeComplete","hex","roles","RouteComponent","exact","render","routeProps","sortedUserRoles","sortedRoles","i","Math","min","hasAtLeastOneRole","to","gapi","load","callback","auth2","init","client_id","ux_mode","onerror","GAPIInited","setGAPIInited","localStorage","getItem","token","setToken","setUser","loginWithGoogle","initGoogleApiEffect","onResult","authInstance","getAuthInstance","isSignedIn","get","googleProfile","currentUser","getBasicProfile","profile","email","getEmail","getName","getFamilyName","getImageUrl","fetchUserForToken","setItem","removeItem","Provider","provider","signIn","signOut","QuestionLastRun","subtitle","modified","runQuery","saveQuery","mr","ButtonGroup","language","getLanguageFromDriver","options","selectOnLineNumbers","editorDidMount","TYPE_NAMES","documents","X_AXIS_LABEL","Y_AXIS_LABEL","ChartForm","values","xAxisValue","yAxisValue","zAxisValue","coloredAxis","icon","renderYAxisValue","FormControlLabel","control","Checkbox","checked","mt","ColorPicker","initialSettings","onSubmit","setSettings","typeSettings","areVisualSettingsValid","field","updatedSettings","coloredColumn","useRouteMatch","setModified","setQuery","visualType","setVisualType","isVisualSettingsFormOpen","setVisualSettingsFormOpen","replace","updateQuestionSettings","newSettings","QueryEditor","QuestionResultCard","currentSettings","VisualSettingsForm","dashboards","useDashboards","Tile","match","dashboardId","fetchDashboardAction","useDashboard","dashboard_id","wrap","sm","client","createClient","requestInterceptors","headers","UserProvider","Header","ProtectedRoute","Home","Dashboard","Dashboards","Question","Questions","Connections","Admin","Landing","Boolean","window","hostname","JavascriptTimeAgo","en","ReactDOM","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b082bff.chunk.js","sourcesContent":["import * as React from 'react'\nimport { userContext, User } from '../hooks'\nimport { useClient, useMutation } from 'react-fetching-library'\nimport { fetchUserForToken, loginWithGoogleAction } from '../service'\nimport { NOOP } from '../utils'\n\ndeclare const gapi: any\n\nexport const GOOGLE_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID\n\nlet GAPI_AVAILABLE: boolean\ngapi.load('auth2', {\n  callback: () => {\n    try {\n      gapi.auth2\n        .init({\n          client_id: GOOGLE_CLIENT_ID,\n          ux_mode: 'redirect',\n        })\n        .then(() => {\n          GAPI_AVAILABLE = true\n        })\n    } catch (e) {\n      GAPI_AVAILABLE = false\n      console.error(e)\n    }\n  },\n  onerror: (e: any) => {\n    GAPI_AVAILABLE = false\n    console.error(e)\n  },\n})\n\nconst initGoogleApiEffect = (onResult: (result: boolean) => void) => () => {\n  if (GAPI_AVAILABLE !== undefined) {\n    onResult(GAPI_AVAILABLE)\n  } else {\n    setTimeout(initGoogleApiEffect(onResult), 10)\n  }\n}\n\nexport default ({ children }: { children: any }) => {\n  const [GAPIInited, setGAPIInited] = React.useState(false)\n  const [token, setToken] = React.useState<string | undefined>(\n    localStorage.getItem('token') || undefined\n  )\n  const [user, setUser] = React.useState<User>()\n  const [loading, setLoading] = React.useState(true)\n\n  const { query } = useClient()\n  const {\n    loading: loadingGoogle,\n    error: errorGoogle,\n    payload: payloadGoogle,\n    mutate: loginWithGoogle,\n  } = useMutation(loginWithGoogleAction)\n\n  React.useEffect(initGoogleApiEffect(setGAPIInited), [])\n  React.useEffect(() => {\n    if (GAPIInited && !token) {\n      const authInstance = gapi.auth2.getAuthInstance()\n      if (authInstance.isSignedIn.get()) {\n        const googleProfile = authInstance.currentUser.get().getBasicProfile()\n        const profile = {\n          email: googleProfile.getEmail(),\n          firstName: googleProfile.getName(),\n          lastName: googleProfile.getFamilyName(),\n          picture: googleProfile.getImageUrl(),\n        }\n        loginWithGoogle(profile).then(({ error, payload }) => {\n          if (!error) {\n            setToken(payload.token)\n          }\n        })\n      }\n    }\n  }, [GAPIInited, loginWithGoogle, token])\n\n  React.useEffect(() => {\n    if (!token) {\n      setUser(undefined)\n      setLoading(false)\n      localStorage.removeItem('token')\n    } else {\n      setLoading(true)\n      query(fetchUserForToken(token)).then(({ error, payload }) => {\n        if (error) {\n          console.error(payload)\n          setToken(undefined)\n          setUser(undefined)\n          setLoading(false)\n        } else {\n          localStorage.setItem('token', token)\n          setUser(payload)\n          setLoading(false)\n        }\n      })\n    }\n  }, [token, query])\n\n  if (loading) {\n    return <h1>Loading user</h1>\n  }\n\n  const login = (provider: string) => {\n    if (provider === 'google') {\n      const authInstance = gapi.auth2.getAuthInstance()\n      if (authInstance) {\n        authInstance.signIn()\n      }\n    }\n  }\n\n  const logout = () => {\n    const authInstance = gapi.auth2.getAuthInstance()\n    if (authInstance) {\n      authInstance.signOut()\n    }\n\n    setToken(undefined)\n  }\n\n  return (\n    <userContext.Provider\n      value={{\n        user,\n        setToken,\n        setUser,\n        login: GAPIInited ? login : NOOP,\n        logout: GAPIInited ? logout : NOOP,\n      }}\n    >\n      {children}\n    </userContext.Provider>\n  )\n}\n","import { Action } from 'react-fetching-library'\n\nexport const API = process.env.REACT_APP_API_HOST\nexport const AUTH = process.env.REACT_APP_AUTH_HOST\n\nconst SERVICES = {\n  API: process.env.REACT_APP_API_HOST,\n  AUTH: process.env.REACT_APP_AUTH_HOST,\n}\n\nexport type ServicePointer = {\n  service?: 'API' | 'AUTH'\n}\n\nexport const requestHostInterceptor = () => async (\n  action: Action & ServicePointer\n) => {\n  return {\n    ...action,\n    endpoint: `${SERVICES[action.service || 'API']}${action.endpoint}`,\n    headers: {\n      'x-auth': localStorage.getItem('token') || '',\n    },\n  }\n}\n\nexport const fetchConnectionsAction: Action = {\n  method: 'GET',\n  endpoint: '/connections',\n}\n\nexport const fetchConnectivityAction: (connection: any) => Action = ({\n  _id,\n}) => ({\n  method: 'GET',\n  endpoint: `/connections/${_id}/connectivity`,\n})\n\nexport const fetchDriversAction: Action = {\n  method: 'GET',\n  endpoint: '/connections/drivers',\n}\n\nexport type ConectionFormData = {\n  name: string\n  driver: string\n  dsn: string\n  id?: string\n}\n\nexport type QuestionFormData = {\n  name?: string\n  connection_id?: string\n  query?: string\n  visualSettings?: any\n}\n\nexport const createConnectionAction: (data: ConectionFormData) => Action = ({\n  name,\n  driver,\n  dsn,\n}: ConectionFormData) => ({\n  method: 'POST',\n  endpoint: '/connections',\n  body: {\n    name,\n    driver,\n    params: {\n      dsn,\n    },\n  },\n})\nexport const updateConnectionAction: (data: ConectionFormData) => Action = ({\n  name,\n  driver,\n  dsn,\n  id,\n}: ConectionFormData) => ({\n  method: 'PUT',\n  endpoint: `/connections/${id}`,\n  body: {\n    name,\n    driver,\n    params: {\n      dsn,\n    },\n  },\n})\n\nexport const createQuestionAction: (data: QuestionFormData) => Action = (\n  data: QuestionFormData\n) => ({\n  method: 'POST',\n  endpoint: '/questions',\n  body: data,\n})\n\nexport const fetchQuestionAction: (questionId: string) => Action = (\n  questionId: string\n) => ({\n  method: 'GET',\n  endpoint: `/questions/${questionId}`,\n})\n\nexport const fetchConnectionAction: (connectionId: string) => Action = (\n  connectionId: string\n) => ({\n  method: 'GET',\n  endpoint: `/connections/${connectionId}`,\n})\n\nexport const updateQuestionAction: (\n  questionId: string\n) => (data: QuestionFormData) => Action = (questionId) => (data) => ({\n  method: 'PUT',\n  endpoint: `/questions/${questionId}`,\n  body: data,\n})\n\ntype QuestionExecutionForm = {\n  question_id: string\n  connection_id: string\n  query: string\n  visualSettings?: any\n}\nexport const createQuestionExecution: (\n  data: QuestionExecutionForm\n) => Action = (data) => ({\n  method: 'POST',\n  endpoint: `/executions`,\n  body: data,\n})\n\nexport const fetchResultAction: (resultId: string) => Action = (resultId) => ({\n  method: 'GET',\n  endpoint: `/results/${resultId}`,\n})\n\nexport const fetchExecutionAction: (executionId: string) => Action = (\n  executionId\n) => ({\n  method: 'GET',\n  endpoint: `/executions/${executionId}`,\n})\n\nexport const fetchQuestionsAction: Action = {\n  method: 'GET',\n  endpoint: '/questions',\n}\n\nexport const fetchLastQuestionExecutionAction: (\n  questionId: string\n) => Action = (questionId: string) => ({\n  method: 'GET',\n  endpoint: `/questions/${questionId}/executions/last`,\n})\n\ntype DashboardForm = {\n  name: string\n  updateFrequency?: number\n  questions?: string[]\n}\nexport const createDashboardAction: (data: DashboardForm) => Action = (\n  data\n) => ({\n  method: 'POST',\n  endpoint: '/dashboards',\n  body: data,\n})\n\nexport const fetchDashboardsAction: Action = {\n  method: 'GET',\n  endpoint: '/dashboards',\n}\n\nexport const fetchDashboardAction: (dashboardId: string) => Action = (\n  dashboardId\n) => ({\n  method: 'GET',\n  endpoint: `/dashboards/${dashboardId}`,\n})\n\nexport const fetchUserForToken: (token: string) => Action & ServicePointer = (\n  token\n) => ({\n  method: 'GET',\n  endpoint: `/tokens/user?token=${token}`,\n  service: 'AUTH',\n})\n\nexport const loginWithGoogleAction: (auth: any) => Action = (auth) => ({\n  method: 'POST',\n  endpoint: '/tokens/google',\n  service: 'AUTH',\n  body: auth,\n})\n","import { useQuery } from 'react-fetching-library'\nimport { fetchConnectionsAction } from '../service'\n\ntype ConnectionsShape = 'map' | 'driver'\ntype ConnectionsQueryResult = {\n  error: boolean\n  errorObject?: any\n  connections?: any\n  drivers?: any\n  loading: boolean\n  query: () => Promise<any>\n}\nexport const useConnections: (\n  shape?: ConnectionsShape\n) => ConnectionsQueryResult = (shape) => {\n  const { payload, ...useQueryReturn } = useQuery(fetchConnectionsAction)\n\n  if (!payload) {\n    return {\n      ...useQueryReturn,\n      connections:\n        useQueryReturn.loading || useQueryReturn.error\n          ? undefined\n          : ([] as any),\n    }\n  }\n\n  switch (shape) {\n    case 'map': {\n      return {\n        ...useQueryReturn,\n        connections: payload.reduce(\n          (acc: any, connection: any) => ({\n            ...acc,\n            [connection._id]: connection,\n          }),\n          {}\n        ),\n      }\n    }\n\n    case 'driver': {\n      const drivers = payload\n        .map((c: any) => c.driver)\n        .filter(\n          (driver: string, index: number, self: any[]) =>\n            self.indexOf(driver) === index\n        )\n        .sort()\n\n      const connections = drivers.reduce(\n        (acc: any, driver: string) => ({\n          ...acc,\n          [driver]: payload.filter((c: any) => c.driver === driver),\n        }),\n        {}\n      )\n\n      return {\n        ...useQueryReturn,\n        connections,\n        drivers,\n      }\n    }\n\n    default: {\n      return {\n        ...useQueryReturn,\n        connections: payload,\n      }\n    }\n  }\n}\n","export const NOOP = (...args: any) => {}\n\nconst DEFAULT_PORT = {\n  mongodb: 27017,\n  postgresql: 5432,\n} as any\n\nexport const formatHosts = (metadata: any) =>\n  metadata.hosts\n    .map((h: any) => `${h.host}:${h.port || DEFAULT_PORT[metadata.scheme]}`)\n    .join(', ')\n\nexport const constructDSN = (metadata: any) => {\n  let dsn = `${metadata.scheme}://`\n  if (metadata.username) {\n    dsn += metadata.username\n  }\n  if (metadata.password) {\n    dsn += `:********`\n  }\n  if (metadata.username) {\n    dsn += '@'\n  }\n  dsn += formatHosts(metadata)\n  dsn += `/${metadata.endpoint}`\n  return dsn\n}\n\nexport const isScalar = (data: any) => {\n  if (data.length > 1 || data.length === 0) {\n    return false\n  }\n\n  const datum = data[0]\n  if (Array.isArray(datum) && datum.length === 1) {\n    return true\n  }\n  if (typeof datum !== 'object') {\n    return true\n  }\n  if (Object.keys(datum).length === 1) {\n    return true\n  }\n\n  return false\n}\n","import * as React from 'react'\nimport { useQuery, useMutation, useClient } from 'react-fetching-library'\nimport {\n  fetchQuestionsAction,\n  fetchQuestionAction,\n  updateQuestionAction,\n  createQuestionExecution,\n  fetchConnectionAction,\n  fetchLastQuestionExecutionAction,\n} from '../service'\nimport { isScalar } from '../utils'\nimport { useConnections } from './connections'\n\nexport const useQuestions = () => {\n  const {\n    loading: loadingQuestions,\n    error: errorQuestions,\n    payload: questions,\n    query,\n  } = useQuery(fetchQuestionsAction)\n  const {\n    loading: loadingConnections,\n    error: errorConnections,\n    connections,\n  } = useConnections('map')\n\n  const loading = loadingQuestions || loadingConnections\n  const error = errorQuestions || errorConnections\n\n  let populatedQuestions\n  if (questions && connections) {\n    populatedQuestions = questions.map((question: any) => ({\n      ...question,\n      connection: connections[question.connection_id],\n    }))\n  }\n  return {\n    loading,\n    error,\n    questions: populatedQuestions,\n    fetchQuestions: query,\n  }\n}\n\nexport const useQuestionSettings = (predefinedSettings: any, result: any) =>\n  React.useMemo(() => {\n    const settings: any = {\n      ...predefinedSettings,\n    }\n\n    if (!result) {\n      return settings\n    }\n\n    if (isScalar(result.data)) {\n      settings.type = 'scalar'\n\n      if (Array.isArray(result.data[0])) {\n        settings.key = 0\n      } else if (typeof result.data[0] !== 'object') {\n        settings.key = null\n      } else {\n        settings.key = Object.keys(result.data[0])[0]\n      }\n    } else {\n      settings.columns = result.columns\n      const chartSettingsKeys = Object.keys(settings).filter((key: string) =>\n        key.startsWith('chart')\n      )\n      for (const chartSettingKey of chartSettingsKeys) {\n        for (const axis of ['xAxis', 'yAxis', 'zAxis']) {\n          if (settings[chartSettingKey][axis]) {\n            if (Array.isArray(settings[chartSettingKey][axis])) {\n              settings[chartSettingKey][axis] = settings[chartSettingKey][\n                axis\n              ].filter(\n                (column: string) => settings.columns.indexOf(column) !== -1\n              )\n            } else if (\n              settings.columns.indexOf(settings[chartSettingKey][axis]) === -1\n            ) {\n              settings[chartSettingKey][axis] = ''\n            }\n          }\n        }\n      }\n    }\n\n    return settings\n  }, [predefinedSettings, result])\n\nexport const useQuestion = (questionId: string) => {\n  const {\n    loading: loadingQuestion,\n    error: errorQuestion,\n    payload: question,\n  } = useQuery(fetchQuestionAction(questionId))\n  const {\n    loading: loadingQuestionUpdate,\n    error: errorQuestionUpdate,\n    payload: updatedQuestion,\n    mutate: updateQuestion,\n  } = useMutation(updateQuestionAction(questionId))\n  const {\n    loading: loadingQuestionExecution,\n    error: errorQuestionExecution,\n    payload: questionExecution,\n    mutate: runQuestion,\n  } = useMutation(createQuestionExecution)\n\n  const { query } = useClient()\n\n  const [loading, setLoading] = React.useState<boolean>()\n  const [error, setError] = React.useState<boolean>()\n  const [connection, setConnection] = React.useState()\n  const [lastExecution, setLastExecution] = React.useState()\n\n  React.useEffect(() => {\n    if (errorQuestion && question) {\n      setLoading(false)\n      setError(question)\n      return\n    }\n\n    if (!error && question) {\n      setLoading(true)\n      query(fetchConnectionAction(question.connection_id))\n        .then(\n          ({ payload: connectionResponse }) =>\n            new Promise<any>((resolve) => {\n              query(fetchLastQuestionExecutionAction(question._id))\n                .then(({ payload: executionResponse }) =>\n                  resolve({ connectionResponse, executionResponse })\n                )\n                .catch(() => resolve({ connectionResponse }))\n            })\n        )\n        .then(({ connectionResponse, executionResponse }) => {\n          setConnection(connectionResponse)\n          setLastExecution(executionResponse)\n          setLoading(false)\n        })\n        .catch((e) => {\n          setError(e)\n        })\n    }\n  }, [question, errorQuestion, query])\n\n  React.useEffect(() => {\n    setLoading(loadingQuestion)\n  }, [loadingQuestion])\n\n  const save = (newQuery: string) =>\n    updateQuestion({\n      name: question.name,\n      connection_id: question.connection_id,\n      query: newQuery,\n    })\n  const run = async (newQuery: string) => {\n    await save(newQuery)\n    await runQuestion({\n      question_id: question._id,\n      connection_id: connection ? connection._id : undefined,\n      query: newQuery,\n    })\n  }\n  const updateSettings = (settings: any) =>\n    updateQuestion({ visualSettings: settings })\n\n  return {\n    loading,\n    error,\n    question:\n      !error && question\n        ? connection\n          ? {\n            ...(updatedQuestion || question),\n            connection,\n          }\n          : undefined\n        : undefined,\n    execution: questionExecution || lastExecution,\n    waiting: loadingQuestionUpdate || loadingQuestionExecution,\n    errorWaiting: errorQuestionUpdate || errorQuestionExecution,\n    save,\n    run,\n    updateSettings,\n  }\n}\n","import * as React from 'react'\nimport { useClient } from 'react-fetching-library'\nimport { fetchExecutionAction, fetchResultAction } from '../service'\n\nconst EXECUTION_FETCH_TIMEOUT_INCREMENT = 100\nconst EXECUTION_FETCH_TIMEOUT_MAX = 3000\nlet FETCH_TIMEOUT = EXECUTION_FETCH_TIMEOUT_INCREMENT\n\ntype UseResultState = {\n  execution?: any\n  result?: any\n  loading: boolean\n  error: null | boolean | string\n}\ntype UseResultAction = {\n  type:\n  | 'START_QUERY'\n  | 'FINISH_QUERY_SUCCESSFULLY'\n  | 'FINISH_QUERY_WITH_ERROR'\n  | 'FINISH_QUERY_WITH_ERROR'\n  | 'REPLACE_EXECUTION'\n  payload?: any\n}\ntype UseResultReducer = React.Reducer<UseResultState, UseResultAction>\n\nconst initResultState: (initialState: UseResultState) => UseResultState = (\n  state\n) => state\nconst initialState: UseResultState = {\n  loading: false,\n  error: false,\n}\n\nconst refetchExecution = (\n  query: any,\n  executionId: string,\n  setExecution: (execution: any) => void,\n  dispatch: React.Dispatch<UseResultAction>\n) =>\n  query(fetchExecutionAction(executionId))\n    .then(({ payload }: any) => {\n      setExecution(payload)\n    })\n    .catch(() => {\n      dispatch({ type: 'FINISH_QUERY_WITH_ERROR', payload: null })\n    })\n\nconst resultReducer: UseResultReducer = (state, action) => {\n  switch (action.type) {\n    case 'START_QUERY':\n      return {\n        ...state,\n        result: undefined,\n        loading: true,\n        error: false,\n      }\n\n    case 'FINISH_QUERY_SUCCESSFULLY':\n      return {\n        ...state,\n        loading: false,\n        error: false,\n        result: action.payload,\n      }\n\n    case 'FINISH_QUERY_WITH_ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: action.payload || true,\n        result: undefined,\n      }\n\n    case 'REPLACE_EXECUTION':\n      return {\n        ...state,\n        error: false,\n        execution: action.payload,\n      }\n\n    default:\n      return state\n  }\n}\n\nexport const useResult = (onResultUpdate: (result: any) => void) => {\n  const { query } = useClient()\n\n  const [{ execution, result, loading, error }, dispatch] = React.useReducer<\n    UseResultReducer,\n    UseResultState\n  >(resultReducer, initialState, initResultState)\n\n  const setExecution = (newExecution: any) => {\n    if (newExecution && (!execution || execution._id !== newExecution._id)) {\n      dispatch({ type: 'REPLACE_EXECUTION', payload: newExecution })\n    }\n\n    if (newExecution.state === 'CREATED' || newExecution.state === 'RUNNING') {\n      dispatch({ type: 'START_QUERY' })\n      setTimeout(\n        () => refetchExecution(query, newExecution._id, setExecution, dispatch),\n        FETCH_TIMEOUT\n      )\n      if (FETCH_TIMEOUT < EXECUTION_FETCH_TIMEOUT_MAX) {\n        FETCH_TIMEOUT += EXECUTION_FETCH_TIMEOUT_INCREMENT\n      }\n    } else if (newExecution.state === 'DONE') {\n      FETCH_TIMEOUT = EXECUTION_FETCH_TIMEOUT_INCREMENT\n      query(fetchResultAction(newExecution.results))\n        .then(({ payload }) => {\n          dispatch({ type: 'FINISH_QUERY_SUCCESSFULLY', payload })\n          onResultUpdate(payload)\n        })\n        .catch(() => {\n          dispatch({ type: 'FINISH_QUERY_WITH_ERROR', payload: null })\n        })\n    } else if (newExecution.state === 'ERROR') {\n      dispatch({ type: 'FINISH_QUERY_WITH_ERROR', payload: newExecution.error })\n    }\n  }\n\n  return {\n    loading,\n    error,\n    execution,\n    result,\n    setExecution,\n  }\n}\n","import * as React from 'react'\nimport { NOOP } from '../utils'\n\nexport type User = {\n  _id?: string\n  email: string\n  firstName: string\n  lastName: string\n  picture?: string\n  roles?: string[]\n}\n\ntype UserContext = {\n  user?: User\n  setToken?: (token?: string) => void\n  setUser?: (user?: User) => void\n  login: (provider: string) => void\n  logout: () => void\n}\n\nexport const userContext = React.createContext<UserContext>({\n  login: NOOP,\n  logout: NOOP,\n})\n\nexport const useUser = () => {\n  return React.useContext(userContext)\n}\n","import * as React from 'react'\nimport { useQuestions } from '../../hooks'\nimport { Container, Box, Paper, Typography, Link, Divider } from '@material-ui/core'\n\nconst Tutorial = () => {\n  return (\n    <Paper>\n      <Box m={1}>\n        <Typography variant=\"h3\">Welcome to BIData</Typography>\n        <Divider />\n        <Box m={2} />\n        <Typography variant=\"body2\">\n          <strong>Note!</strong> It's still an early alpha stage. Please report all found bugs{' '}\n          <Link target=\"_blank\" href=\"https://github.com/MGrin/bidata/issues\">here</Link>\n          {' '}🙏\n        </Typography>\n        <Box m={2} />\n        <Typography variant=\"h6\">Connections</Typography>\n        <Typography variant=\"body2\">\n          To start you can <Link href=\"/admin/connections\">create a connection</Link> to your database.\n          If you don't want to use your own DB, you can explore publicly available ones\n        </Typography>\n        <Divider />\n        <Box m={2} />\n        <Typography variant=\"h6\">Questions</Typography>\n        <Typography variant=\"body2\">\n          After configuring your own connections (or not, if you are ok using publicly available ones),\n          you can create a new quesdtion to the data.<br />\n          To do so, click in the button on the right upper corner and select Question.\n        </Typography>\n        <Divider />\n        <Box m={2} />\n        <Typography variant=\"h6\">Dashboards</Typography>\n        <Typography variant=\"body2\">\n          Your questions can be assambled in dashboards. <br />\n          To create a dashboard, click on the same button in the up right corner and click on Dashboard\n        </Typography>\n        <Divider />\n        <Box m={2} p={2} />\n      </Box>\n    </Paper >\n  )\n}\nexport default () => {\n  const { loading, error, questions } = useQuestions()\n\n  return (\n    <Container>\n      {loading && <h1>Loading</h1>}\n      {error && <h1>Error</h1>}\n      {questions && (\n        <Box m={1}>\n          <Tutorial />\n        </Box>\n      )}\n    </Container>\n  )\n}\n","import * as React from 'react'\n\nexport default () => <h1>Admin</h1>\n","import * as React from 'react'\nimport { useQuery, useMutation } from 'react-fetching-library'\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  TextField,\n  DialogActions,\n  Button,\n  InputLabel,\n  FormControl,\n  Select,\n  MenuItem,\n  Typography,\n  LinearProgress,\n} from '@material-ui/core'\nimport { constructDSN } from '../../utils'\nimport {\n  fetchDriversAction,\n  createConnectionAction,\n  updateConnectionAction,\n} from '../../service'\n\nconst validate = (name: string, driver: string, dsn: string) => {\n  if (!name) {\n    return false\n  }\n  if (!driver) {\n    return false\n  }\n\n  if (!dsn) {\n    return false\n  }\n\n  return true\n}\n\ntype Props = {\n  open: boolean\n  onClose: () => void\n  connection?: any\n  onSuccess: () => void\n  setSubmitting: (submitting: boolean) => void\n}\n\nexport default React.memo(\n  ({ connection, open, onClose, setSubmitting, onSuccess }: Props) => {\n    let loading = false\n\n    const {\n      loading: loadingDrivers,\n      error: errorDrivers,\n      payload: drivers,\n    } = useQuery(fetchDriversAction)\n    const { loading: createLoading, mutate: createConnection } = useMutation(\n      createConnectionAction\n    )\n    const { loading: updateLoading, mutate: updateConnection } = useMutation(\n      updateConnectionAction\n    )\n\n    loading = loadingDrivers || createLoading || updateLoading\n\n    const [name, setName] = React.useState('')\n    const [driver, setDriver] = React.useState('')\n    const [dsn, setDsn] = React.useState('')\n    const [error, setError] = React.useState()\n\n    React.useEffect(() => {\n      if (connection) {\n        setName(connection.name)\n        setDriver(connection.driver)\n        setDsn(constructDSN(connection.metadata))\n      }\n    }, [connection])\n\n    const isValid = validate(name, driver, dsn)\n\n    const clearForm = () => {\n      setDriver('')\n      setName('')\n      setDsn('')\n    }\n\n    const submitConnection = async () => {\n      setError(undefined)\n      setSubmitting(true)\n      const mutate = connection ? updateConnection : createConnection\n      const { payload: mutationPayload, error: mutationError } = await mutate({\n        name,\n        driver,\n        dsn,\n        id: connection ? connection._id : undefined,\n      })\n      setSubmitting(false)\n      if (mutationError) {\n        return setError(mutationPayload)\n      }\n      clearForm()\n      onSuccess()\n    }\n\n    return (\n      <Dialog open={open} onClose={onClose}>\n        <DialogTitle>Add new connection</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            To create new connection, please select the database type and\n            provide the connection string:\n          </DialogContentText>\n          <FormControl fullWidth disabled={loading}>\n            <InputLabel id=\"database-type-select-label\">\n              Database type\n            </InputLabel>\n            <Select\n              labelId=\"database-type-select-label\"\n              id=\"database-type-select\"\n              value={driver}\n              required\n              disabled={loading || errorDrivers}\n              error={errorDrivers}\n              onChange={({ target: { value } }) => {\n                setDriver(value as string)\n                setDsn(`${value}://`)\n              }}\n            >\n              {drivers &&\n                drivers.map((d: string) => (\n                  <MenuItem key={d} value={d}>\n                    {d}\n                  </MenuItem>\n                ))}\n            </Select>\n            <TextField\n              required\n              label=\"Name\"\n              type=\"text\"\n              value={name}\n              disabled={loading}\n              onChange={({ target: { value } }) => setName(value)}\n            />\n            <TextField\n              required\n              label=\"Connection string\"\n              helperText=\"DSN format: scheme://[user:[password@]]host1[:port1][,host2:[port2],...[,hostN:[portN]]][[/]?options]\"\n              type=\"url\"\n              value={dsn}\n              disabled={loading}\n              onChange={({ target: { value } }) => setDsn(value)}\n            />\n            {error && (\n              <Typography color=\"error\" variant=\"caption\">\n                Error: {error.message}\n              </Typography>\n            )}\n            {loading && <LinearProgress />}\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button\n            disabled={loading}\n            onClick={(e) => {\n              clearForm()\n              if (onClose) {\n                onClose()\n              }\n            }}\n            color=\"secondary\"\n          >\n            Cancel\n          </Button>\n          <Button\n            disabled={!isValid || loading}\n            onClick={submitConnection}\n            color=\"primary\"\n          >\n            {connection ? 'Update' : 'Add'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n)\n","import * as React from 'react'\nimport {\n  TableRow,\n  TableCell,\n  Typography,\n  Button,\n  CircularProgress,\n} from '@material-ui/core'\nimport EditIcon from '@material-ui/icons/Edit'\nimport { useQuery } from 'react-fetching-library'\nimport ErrorIcon from '@material-ui/icons/ErrorOutline'\nimport DoneIcon from '@material-ui/icons/Done'\nimport { useUser } from '../../hooks'\nimport { formatHosts } from '../../utils'\nimport { fetchConnectivityAction } from '../../service'\n\ntype Props = {\n  connection: any\n  onEdit: () => void\n}\n\nconst DriverIcon = ({ driver }: { driver: string }) => {\n  switch (driver) {\n    case 'mongodb': {\n      return (\n        <img\n          alt=\"mongodb\"\n          src=\"https://store-images.s-microsoft.com/image/apps.6989.5a75739e-6663-45e9-b4c8-974dcbde28a9.96b28dd0-717a-4e5b-85f1-2727929049c5.55e5d6e3-bd01-4752-b1a5-b6c5450faa32\"\n          width=\"40px\"\n          height=\"40px\"\n        />\n      )\n    }\n\n    case 'postgresql': {\n      return (\n        <img\n          alt=\"postgresql\"\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Postgresql_elephant.svg/1080px-Postgresql_elephant.svg.png\"\n          width=\"30px\"\n          height=\"30px\"\n        />\n      )\n    }\n\n    default:\n      return null\n  }\n}\nexport default React.memo(({ connection, onEdit }: Props) => {\n  const { loading, error, query } = useQuery(\n    fetchConnectivityAction(connection)\n  )\n  const connected = !loading && !error\n\n  const { user } = useUser()\n\n  React.useEffect(() => {\n    query()\n  }, [connection, query])\n  return (\n    <TableRow hover>\n      <TableCell align=\"center\">\n        <DriverIcon driver={connection.driver} />\n      </TableCell>\n      <TableCell align=\"center\">\n        {loading && <CircularProgress size={16} />}\n        {error && <ErrorIcon color=\"error\" />}\n        {connected && <DoneIcon color=\"primary\" />}\n      </TableCell>\n      <TableCell>\n        <Typography variant=\"overline\">{connection.name}</Typography>\n      </TableCell>\n      <TableCell>{connection.metadata.username || ''}</TableCell>\n      <TableCell>{formatHosts(connection.metadata)}</TableCell>\n      <TableCell>{connection.metadata.endpoint}</TableCell>\n      <TableCell>\n        {user && user._id === connection.owner_id && (\n          <Button\n            size=\"small\"\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<EditIcon />}\n            onClick={onEdit}\n          >\n            Edit\n          </Button>\n        )}\n      </TableCell>\n    </TableRow>\n  )\n})\n","import * as React from 'react'\nimport {\n  Container,\n  Typography,\n  Button,\n  Box,\n  TableContainer,\n  TableRow,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n} from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport AddIcon from '@material-ui/icons/Add'\nimport ConnectionForm from './ConnectionForm'\nimport ConnectionRow from './ConnectionRow'\nimport { useConnections } from '../../hooks'\n\nexport default () => {\n  const { loading, error, connections, query } = useConnections()\n  const [editingConnection, setEditingConnection] = React.useState()\n  const [submitting, setSubmitting] = React.useState(false)\n  const [isConnectionFormOpen, setConnectionFormOpen] = React.useState(false)\n\n  const editConnection = (connection: any) => {\n    setEditingConnection(connection)\n    setConnectionFormOpen(true)\n  }\n  const closeConnectionForm = () => {\n    if (!submitting) {\n      setEditingConnection(undefined)\n      setConnectionFormOpen(false)\n    }\n  }\n\n  return (\n    <Container>\n      {loading && <h1>Loading</h1>}\n      {error && <h1>Error</h1>}\n      {connections && (\n        <Box m={1}>\n          {connections.length > 0 && (\n            <Typography variant=\"h6\">Connections:</Typography>\n          )}\n          <Box mb={1}>\n            <TableContainer>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell align=\"center\">Driver</TableCell>\n                    <TableCell />\n                    <TableCell>Name</TableCell>\n                    <TableCell>Username</TableCell>\n                    <TableCell>Hosts</TableCell>\n                    <TableCell>Database</TableCell>\n                    <TableCell />\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {connections.map((connection: any) => (\n                    <ConnectionRow\n                      key={connection._id}\n                      connection={connection}\n                      onEdit={() => editConnection(connection)}\n                    />\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Box>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<AddIcon />}\n            onClick={() => setConnectionFormOpen(true)}\n          >\n            Add connection\n          </Button>\n        </Box>\n      )}\n      <ConnectionForm\n        open={isConnectionFormOpen}\n        connection={editingConnection}\n        onClose={closeConnectionForm}\n        onSuccess={() => {\n          query()\n          closeConnectionForm()\n        }}\n        setSubmitting={setSubmitting}\n      />\n    </Container>\n  )\n}\n","import * as React from 'react'\nimport {\n  Box,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n  LinearProgress,\n  DialogActions,\n  Button,\n  TextField,\n} from '@material-ui/core'\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer'\nimport { useConnections } from '../../hooks'\nimport { createQuestionAction } from '../../service'\nimport { useMutation } from 'react-fetching-library'\n\ntype Props = {\n  open: boolean\n  onClose: () => void\n  onSuccess: (question: any) => void\n}\n\nconst validate = (connection: string, name: string) => {\n  if (!connection) {\n    return false\n  }\n\n  if (!name) {\n    return false\n  }\n\n  return true\n}\n\nexport default ({ open, onClose, onSuccess }: Props) => {\n  const {\n    loading: loadingConnections,\n    error: errorConnections,\n    connections,\n    query: fetchConnections,\n  } = useConnections()\n  const { loading: loadingSubmission, mutate: createQuestion } = useMutation(\n    createQuestionAction\n  )\n  const loading = loadingConnections || loadingSubmission\n\n  const [connection, setConnection] = React.useState('')\n  const [connectionDriver, setConnectionDriver] = React.useState('')\n  const [name, setName] = React.useState('')\n  const [error, setError] = React.useState()\n\n  React.useEffect(() => {\n    if (open) {\n      fetchConnections()\n    }\n  }, [open, fetchConnections])\n  const isValid = validate(connection, name)\n  const clearForm = () => {\n    setConnection('')\n    setName('')\n  }\n  const submitQuestion = async () => {\n    setError(undefined)\n    const questionData = {\n      name,\n      connection_id: connection,\n      visualSettings: {\n        type: connectionDriver === 'mongodb' ? 'documents' : 'columns',\n      },\n    }\n    const {\n      payload: mutationPayload,\n      error: mutationError,\n    } = await createQuestion(questionData)\n    if (mutationError) {\n      return setError(mutationPayload)\n    }\n    clearForm()\n    onSuccess(mutationPayload)\n  }\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <DialogTitle>\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <QuestionAnswerIcon />\n          <Box m={1} />\n          Add new question\n        </Box>\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          To create new questions, please select the connection:\n        </DialogContentText>\n        <FormControl fullWidth disabled={loading}>\n          <InputLabel id=\"connection-select-label\">Connection</InputLabel>\n          <Select\n            labelId=\"connection-select-label\"\n            id=\"connection-select\"\n            value={connection}\n            required\n            disabled={loading}\n            error={errorConnections}\n            onChange={({ target: { value } }) => {\n              setConnection(value as string)\n              setConnectionDriver(\n                (connections as any[]).find((c) => c._id === value).driver\n              )\n            }}\n          >\n            {connections &&\n              connections.map((c: any) => (\n                <MenuItem key={c._id} value={c._id}>\n                  {c.name}\n                </MenuItem>\n              ))}\n          </Select>\n        </FormControl>\n        <FormControl fullWidth disabled={loading}>\n          <TextField\n            required\n            label=\"Name\"\n            type=\"text\"\n            value={name}\n            disabled={loading}\n            onChange={({ target: { value } }) => setName(value)}\n          />\n        </FormControl>\n        {error && (\n          <Typography color=\"error\" variant=\"caption\">\n            Error: {error && error.message}\n          </Typography>\n        )}\n        {loading && <LinearProgress />}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          disabled={loading}\n          onClick={(e) => {\n            if (onClose) {\n              onClose()\n            }\n          }}\n          color=\"secondary\"\n        >\n          Cancel\n        </Button>\n        <Button\n          disabled={!isValid || loading}\n          onClick={submitQuestion}\n          color=\"primary\"\n        >\n          Create question\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import * as React from 'react'\nimport {\n  Box,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  FormControl,\n  Typography,\n  LinearProgress,\n  DialogActions,\n  Button,\n  TextField,\n  InputLabel,\n  Select,\n  Chip,\n  Input,\n  MenuItem,\n  DialogContentText,\n} from '@material-ui/core'\nimport { useMutation } from 'react-fetching-library'\nimport DashboardIcon from '@material-ui/icons/Dashboard'\nimport { createDashboardAction } from '../../service'\nimport { useQuestions } from '../../hooks'\n\ntype Props = {\n  open: boolean\n  onClose: () => void\n  onSuccess: (dashboard: any) => void\n}\n\nconst validate = (name: string) => {\n  if (!name) {\n    return false\n  }\n\n  return true\n}\n\nexport default ({ open, onClose, onSuccess }: Props) => {\n  const {\n    loading: loadingQuestions,\n    questions: availableQuestions,\n    fetchQuestions,\n  } = useQuestions()\n  const { loading: loadingSubmission, mutate: createDashboard } = useMutation(\n    createDashboardAction\n  )\n  const loading = loadingQuestions || loadingSubmission\n\n  const [name, setName] = React.useState('')\n  const [description, setDescription] = React.useState('')\n  const [updateFrequency, setUpdateFrequency] = React.useState()\n  const [questions, setQuestions] = React.useState<string[]>([])\n  const [error, setError] = React.useState()\n\n  React.useEffect(() => {\n    if (open) {\n      fetchQuestions()\n    }\n  }, [open, fetchQuestions])\n\n  const isValid = validate(name)\n  const clearForm = () => {\n    setName('')\n    setUpdateFrequency(undefined)\n    setQuestions([])\n    setError(undefined)\n  }\n  const submitDashboard = async () => {\n    setError(undefined)\n    const dashboardData = {\n      name,\n      description,\n      updateFrequency,\n      questions,\n    }\n    const {\n      payload: mutationPayload,\n      error: mutationError,\n    } = await createDashboard(dashboardData)\n    if (mutationError) {\n      return setError(mutationPayload)\n    }\n    clearForm()\n    onSuccess(mutationPayload)\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={(e, s) => {\n        clearForm()\n        if (onClose) {\n          onClose()\n        }\n      }}\n    >\n      <DialogTitle>\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <DashboardIcon />\n          <Box m={1} />\n          Add new dashboard\n        </Box>\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          To create new dashboard, please provide a name and a list of\n          questions. Don't worry, you'll be able to change this list later\n        </DialogContentText>\n        <FormControl fullWidth disabled={loading}>\n          <TextField\n            required\n            label=\"Name\"\n            type=\"text\"\n            value={name}\n            disabled={loading}\n            onChange={({ target: { value } }) => setName(value)}\n          />\n        </FormControl>\n        <FormControl fullWidth disabled={loading}>\n          <TextField\n            required\n            label=\"Description\"\n            type=\"text\"\n            multiline\n            value={description}\n            disabled={loading}\n            onChange={({ target: { value } }) => setDescription(value)}\n          />\n        </FormControl>\n        <FormControl fullWidth disabled={loading}>\n          <InputLabel id=\"questions-selector-label\">Questions</InputLabel>\n          <Select\n            labelId=\"questions-selector-label\"\n            id=\"questions-selector\"\n            multiple\n            value={questions}\n            onChange={({ target: { value } }) =>\n              setQuestions(value as string[])\n            }\n            input={<Input id=\"questions-selector-input\" />}\n            renderValue={(selected) =>\n              (selected as string[]).map((questionId) => (\n                <Chip\n                  key={questionId}\n                  label={\n                    availableQuestions.find(\n                      ({ _id }: any) => _id === questionId\n                    ).name\n                  }\n                />\n              ))\n            }\n          >\n            {availableQuestions &&\n              availableQuestions.map((question: any) => (\n                <MenuItem key={question._id} value={question._id}>\n                  {question.name}\n                </MenuItem>\n              ))}\n          </Select>\n        </FormControl>\n        {error && (\n          <Typography color=\"error\" variant=\"caption\">\n            Error: {error && error.message}\n          </Typography>\n        )}\n        {loading && <LinearProgress />}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          disabled={loading}\n          onClick={(e) => {\n            clearForm()\n            if (onClose) {\n              onClose()\n            }\n          }}\n          color=\"secondary\"\n        >\n          Cancel\n        </Button>\n        <Button\n          disabled={!isValid || loading}\n          onClick={submitDashboard}\n          color=\"primary\"\n        >\n          Create dashboard\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import * as React from 'react'\n\nexport default () => (\n  <img\n    width=\"20px\"\n    height=\"20px\"\n    alt=\"Google logo\"\n    src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/1024px-Google_%22G%22_Logo.svg.png\"\n  />\n)\n","import * as React from 'react'\nimport {\n  Box,\n  IconButton,\n  Breadcrumbs,\n  Link,\n  AppBar,\n  Toolbar,\n  Button,\n  Grid,\n  Menu,\n  MenuItem,\n  ListItemText,\n  ListItemIcon,\n  Drawer,\n  List,\n  ListItem,\n  Divider,\n  Typography,\n  Avatar,\n  Popover,\n} from '@material-ui/core'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles'\nimport { useTheme } from '@material-ui/core/styles'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport AddIcon from '@material-ui/icons/Add'\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\nimport DashboardIcon from '@material-ui/icons/Dashboard'\nimport QuestionAnswerIcon from '@material-ui/icons/QuestionAnswer'\nimport SettingsInputComponentIcon from '@material-ui/icons/SettingsInputComponent'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\nimport NewQuestioForm from './NewQuestionForm'\nimport NewDashboardForm from './NewDashboardForm'\nimport GoogleIcon from '../GoogleIcon'\nimport { useUser } from '../../hooks'\n\nconst Title = () => {\n  const location = useLocation<{ title?: string }>()\n  let path = location.pathname\n    .split('/')\n    .filter((p: string, idx: number, self: string[]) => self.indexOf(p) === idx)\n  let accPath = '/'\n\n  const theme = useTheme()\n  const isXS = useMediaQuery(theme.breakpoints.down('xs'))\n\n  if (isXS) {\n    path = [path[path.length - 1]]\n  }\n  return (\n    <Breadcrumbs color=\"primary.contrastText\">\n      {path.map((page: string, idx: number) => {\n        accPath += page ? `${page}/` : ''\n\n        let title = page || 'BIData'\n        if (idx === path.length - 1) {\n          title =\n            location.state && location.state.title\n              ? location.state.title\n              : title\n        }\n\n        return (\n          <Link key={accPath} color=\"inherit\" href={accPath} variant=\"h6\">\n            {title}\n          </Link>\n        )\n      })}\n    </Breadcrumbs>\n  )\n}\n\ntype DrawerMenuProps = {\n  open: boolean\n  navigate: (path: string) => void\n  onClose: () => void\n}\n\nconst DrawerMenu = ({ open, navigate, onClose }: DrawerMenuProps) => {\n  const location = useLocation()\n  const history = useHistory()\n\n  return (\n    <Drawer anchor=\"left\" open={open} onClose={onClose}>\n      <Box width={300}>\n        <List dense>\n          <ListItem onClick={() => {\n            history.push('/')\n            onClose()\n          }}>\n            <Typography variant=\"h3\">BIData</Typography>\n          </ListItem>\n          <ListItem\n            button\n            selected={location.pathname === '/dashboards'}\n            onClick={() => navigate('/dashboards')}\n          >\n            <ListItemIcon>\n              <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Dashboards\" />\n          </ListItem>\n          <ListItem\n            button\n            selected={location.pathname === '/questions'}\n            onClick={() => navigate('/questions')}\n          >\n            <ListItemIcon>\n              <QuestionAnswerIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Questions\" />\n          </ListItem>\n          <Divider />\n          <ListItem\n            button\n            selected={location.pathname === '/admin/connections'}\n            onClick={() => navigate('/admin/connections')}\n          >\n            <ListItemIcon>\n              <SettingsInputComponentIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Connections\" />\n          </ListItem>\n        </List>\n      </Box>\n    </Drawer>\n  )\n}\n\nconst useAvatarStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    small: {\n      width: theme.spacing(4),\n      height: theme.spacing(4),\n    },\n  })\n)\n\nconst useMenuStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    popover: {\n      marginTop: theme.spacing(2),\n    },\n  })\n)\n\ntype HeaderContentProps = {\n  openMenu: () => void\n  openAddNewSelector: (e: any) => void\n  openUserMenu: (e: any) => void\n}\nconst HeaderContent = ({\n  openMenu,\n  openAddNewSelector,\n  openUserMenu,\n}: HeaderContentProps) => {\n  const theme = useTheme()\n  const isXS = useMediaQuery(theme.breakpoints.down('xs'))\n  const { user } = useUser()\n  const { small } = useAvatarStyles()\n\n  return (\n    <Toolbar style={{ paddingLeft: 0 }}>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        align-items=\"center\"\n      >\n        <Box\n          color=\"primary.contrastText\"\n          display=\"flex\"\n          flexDirection=\"row\"\n          alignItems=\"center\"\n        >\n          <IconButton style={{ color: 'white' }} onClick={openMenu}>\n            <MenuIcon />\n          </IconButton>\n          <Title />\n        </Box>\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          {isXS ? (\n            <IconButton color=\"inherit\" onClick={openAddNewSelector}>\n              <AddCircleIcon />\n            </IconButton>\n          ) : (\n              <Button\n                variant=\"outlined\"\n                color=\"inherit\"\n                size=\"small\"\n                startIcon={<AddIcon />}\n                onClick={openAddNewSelector}\n              >\n                Add new ...\n              </Button>\n            )}\n          <Box m={1} />\n          <IconButton onClick={openUserMenu}>\n            <Avatar\n              alt={`${user?.firstName} ${user?.lastName}`}\n              src={user?.picture}\n              className={small}\n            />\n          </IconButton>\n        </Box>\n      </Grid>\n    </Toolbar>\n  )\n}\n\ntype AddNewSelectorProps = {\n  open: boolean\n  anchorEl: Element | null\n  openNewDashboard: () => void\n  openNewQuestion: () => void\n  onClose: () => void\n}\nconst AddNewSelector = ({\n  open,\n  anchorEl,\n  openNewDashboard,\n  openNewQuestion,\n  onClose,\n}: AddNewSelectorProps) => {\n  const classes = useMenuStyles()\n  return (\n    <Popover\n      open={open}\n      keepMounted\n      anchorEl={anchorEl}\n      onClose={onClose}\n      className={classes.popover}\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'right',\n      }}\n      transformOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n    >\n      <MenuItem onClick={openNewDashboard}>\n        <ListItemIcon>\n          <DashboardIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Dashboard\" />\n      </MenuItem>\n      <MenuItem onClick={openNewQuestion}>\n        <ListItemIcon>\n          <QuestionAnswerIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Question\" />\n      </MenuItem>\n    </Popover>\n  )\n}\n\ntype UserMenuProps = {\n  open: boolean\n  anchorEl: Element | null\n  logout: () => void\n  onClose: () => void\n}\nconst UserMenu = ({ open, anchorEl, logout, onClose }: UserMenuProps) => {\n  return (\n    <Popover\n      open={open}\n      keepMounted\n      anchorEl={anchorEl}\n      onClose={onClose}\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'right',\n      }}\n      transformOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n    >\n      <MenuItem onClick={logout}>\n        <ListItemIcon>\n          <ExitToAppIcon />\n        </ListItemIcon>\n        <ListItemText primary=\"Log out\" />\n      </MenuItem>\n    </Popover>\n  )\n}\nconst HeaderForAuthenticatedUser = React.memo(() => {\n  const history = useHistory()\n\n  const [addAnchorEl, setAddAnchorEl] = React.useState<HTMLElement | null>(null)\n  const [\n    userMenuAnchorEl,\n    setUserMenuAnchorEl,\n  ] = React.useState<HTMLElement | null>(null)\n  const [isMenuOpen, setIsMenuOpen] = React.useState(false)\n\n  const [isNewQuestionFormOpen, setNewQuestionFormOpen] = React.useState(false)\n  const [isNewDashboardFormOpen, setNewDashboardFormOpen] = React.useState(\n    false\n  )\n\n  const { logout } = useUser()\n\n  return (\n    <AppBar position=\"static\">\n      <HeaderContent\n        openMenu={() => setIsMenuOpen(true)}\n        openAddNewSelector={(e) => setAddAnchorEl(e.currentTarget)}\n        openUserMenu={(e) => setUserMenuAnchorEl(e.currentTarget)}\n      />\n      <DrawerMenu\n        open={isMenuOpen}\n        onClose={() => setIsMenuOpen(false)}\n        navigate={(path: string) => {\n          history.push(path)\n          setIsMenuOpen(false)\n        }}\n      />\n      <AddNewSelector\n        open={!!addAnchorEl}\n        anchorEl={addAnchorEl}\n        openNewDashboard={() => {\n          setAddAnchorEl(null)\n          setNewDashboardFormOpen(true)\n        }}\n        openNewQuestion={() => {\n          setAddAnchorEl(null)\n          setNewQuestionFormOpen(true)\n        }}\n        onClose={() => setAddAnchorEl(null)}\n      />\n      <UserMenu\n        open={!!userMenuAnchorEl}\n        anchorEl={userMenuAnchorEl}\n        logout={logout}\n        onClose={() => setUserMenuAnchorEl(null)}\n      />\n      <NewQuestioForm\n        open={isNewQuestionFormOpen}\n        onClose={() => setNewQuestionFormOpen(false)}\n        onSuccess={(question: any) => {\n          history.push(`/questions/${question._id}`)\n          setNewQuestionFormOpen(false)\n        }}\n      />\n      <NewDashboardForm\n        open={isNewDashboardFormOpen}\n        onClose={() => setNewDashboardFormOpen(false)}\n        onSuccess={(dashboard: any) => {\n          history.push(`/dashboards/${dashboard._id}`)\n          setNewDashboardFormOpen(false)\n        }}\n      />\n    </AppBar>\n  )\n})\n\nconst AnonymousHeader = React.memo(() => {\n  const [signinAnchor, setSigninAnchor] = React.useState<any>()\n  const { login } = useUser()\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-between\"\n          align-items=\"center\"\n        >\n          <Typography variant=\"h6\">BIData</Typography>\n          <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n            <Button\n              variant=\"outlined\"\n              color=\"inherit\"\n              size=\"small\"\n              disabled={!login}\n              onClick={(e) => setSigninAnchor(e.currentTarget)}\n            >\n              Sign In\n            </Button>\n          </Box>\n        </Grid>\n      </Toolbar>\n      <Menu\n        open={!!signinAnchor}\n        keepMounted\n        anchorEl={signinAnchor}\n        onClose={() => setSigninAnchor(null)}\n      >\n        <MenuItem onClick={() => login && login('google')} dense>\n          <ListItemIcon>\n            <GoogleIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Signin with Google\" />\n        </MenuItem>\n      </Menu>\n    </AppBar>\n  )\n})\n\nexport default React.memo(() => {\n  const { user } = useUser()\n\n  if (user) {\n    return <HeaderForAuthenticatedUser />\n  }\n\n  return <AnonymousHeader />\n})\n","import * as React from 'react'\nimport { useQuery } from 'react-fetching-library'\nimport { fetchLastQuestionExecutionAction } from '../service'\nimport { CircularProgress, Tooltip } from '@material-ui/core'\nimport SuccessIcon from '@material-ui/icons/CheckCircleOutline'\nimport ErrorIcon from '@material-ui/icons/ErrorOutline'\nimport RunningIcon from '@material-ui/icons/HourglassEmpty'\n// @ts-ignore\nimport ReactTimeAgo from 'react-time-ago'\n\nconst getExecutionIcon = (execution: any) => {\n  switch (execution.state) {\n    case 'DONE':\n      return <SuccessIcon color=\"primary\" />\n    case 'ERROR':\n      return <ErrorIcon color=\"error\" />\n    default:\n      return <RunningIcon />\n  }\n}\n\ntype Props = {\n  question: any\n}\n\nexport default React.memo(({ question }: Props) => {\n  const { loading, error, payload: execution } = useQuery(\n    fetchLastQuestionExecutionAction(question._id)\n  )\n  if (loading) {\n    return <CircularProgress size={14} />\n  }\n\n  if (error) {\n    console.log(execution)\n    return null\n  }\n\n  if (execution) {\n    return (\n      <Tooltip\n        title={<ReactTimeAgo date={new Date(execution.created)} locale=\"en\" />}\n        placement=\"right\"\n        arrow\n      >\n        {getExecutionIcon(execution)}\n      </Tooltip>\n    )\n  }\n\n  return null\n})\n","import * as React from 'react'\nimport {\n  Box,\n  Typography,\n  BoxProps,\n  IconButton,\n  Tooltip,\n} from '@material-ui/core'\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab'\nimport { useTheme } from '@material-ui/core/styles'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\nimport ListIcon from '@material-ui/icons/List'\nimport AccessTimeIcon from '@material-ui/icons/AccessTime'\nimport TimelineIcon from '@material-ui/icons/Timeline'\nimport PieChartIcon from '@material-ui/icons/PieChart'\nimport BarChartIcon from '@material-ui/icons/BarChart'\nimport BubbleChartIcon from '@material-ui/icons/BubbleChart'\nimport SettingsIcon from '@material-ui/icons/Settings'\n// @ts-ignore\nimport ReactTimeAgo from 'react-time-ago'\nimport { parseISO } from 'date-fns'\n\ntype FooterProps = {\n  children: React.ElementType\n  settings: any\n  execution: any\n  driver: string\n  editable: boolean\n  requestVisualTypeChange: (type: string, settings: any) => void\n  openVisualSettingsForm: () => void\n} & BoxProps\n\nexport default ({\n  children,\n  settings,\n  execution,\n  driver,\n  editable,\n  requestVisualTypeChange,\n  openVisualSettingsForm,\n  ...props\n}: FooterProps) => {\n  const theme = useTheme()\n  const isXS = useMediaQuery(theme.breakpoints.down('sm'))\n\n  const handleVisualTypeChange = (\n    event: React.MouseEvent<HTMLElement>,\n    newType: string | null\n  ) => {\n    if (newType) {\n      requestVisualTypeChange(newType, settings)\n    }\n  }\n\n  return (\n    <Box\n      {...props}\n      style={{\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}\n    >\n      <Box p={2}>\n        {!isXS && execution && (\n          <Typography variant=\"caption\">\n            Ran <ReactTimeAgo date={parseISO(execution.created)} />\n          </Typography>\n        )}\n        {isXS && execution && (\n          <Tooltip\n            disableFocusListener\n            title={\n              <ReactTimeAgo date={parseISO(execution.created)} locale=\"en\" />\n            }\n            placement=\"top\"\n            arrow\n          >\n            <AccessTimeIcon fontSize=\"small\" />\n          </Tooltip>\n        )}\n      </Box>\n      {!isXS && editable && settings.type !== 'scalar' && (\n        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n          <ToggleButtonGroup\n            size=\"small\"\n            value={settings.type}\n            exclusive\n            onChange={handleVisualTypeChange}\n          >\n            <ToggleButton\n              size={isXS ? 'small' : undefined}\n              value={driver === 'mongodb' ? 'documents' : 'columns'}\n            >\n              <Tooltip title=\"Table\" placement=\"top\" arrow disableFocusListener>\n                <ListIcon\n                  color={\n                    settings.type === 'documents' || settings.type === 'columns'\n                      ? 'primary'\n                      : undefined\n                  }\n                />\n              </Tooltip>\n            </ToggleButton>\n            <ToggleButton value=\"chart.line\" size={isXS ? 'small' : undefined}>\n              <Tooltip\n                title=\"Line chart\"\n                placement=\"top\"\n                arrow\n                disableFocusListener\n              >\n                <TimelineIcon\n                  color={settings.type === 'chart.line' ? 'primary' : undefined}\n                />\n              </Tooltip>\n            </ToggleButton>\n            <ToggleButton value=\"chart.pie\" size={isXS ? 'small' : undefined}>\n              <Tooltip\n                title=\"Pie chart\"\n                placement=\"top\"\n                arrow\n                disableFocusListener\n              >\n                <PieChartIcon\n                  color={settings.type === 'chart.pie' ? 'primary' : undefined}\n                />\n              </Tooltip>\n            </ToggleButton>\n            <ToggleButton value=\"chart.bar\" size={isXS ? 'small' : undefined}>\n              <Tooltip\n                title=\"Bar chart\"\n                placement=\"top\"\n                arrow\n                disableFocusListener\n              >\n                <BarChartIcon\n                  color={settings.type === 'chart.bar' ? 'primary' : undefined}\n                />\n              </Tooltip>\n            </ToggleButton>\n            <ToggleButton\n              value=\"chart.bubble\"\n              size={isXS ? 'small' : undefined}\n            >\n              <Tooltip\n                title=\"Bubble chart\"\n                placement=\"top\"\n                arrow\n                disableFocusListener\n              >\n                <BubbleChartIcon\n                  color={\n                    settings.type === 'chart.bubble' ? 'primary' : undefined\n                  }\n                />\n              </Tooltip>\n            </ToggleButton>\n          </ToggleButtonGroup>\n\n          <Box ml={1}>\n            {settings.type !== 'documents' && settings.type !== 'columns' && (\n              <IconButton onClick={openVisualSettingsForm}>\n                <SettingsIcon color=\"primary\" className=\"clickable\" />\n              </IconButton>\n            )}\n          </Box>\n        </Box>\n      )}\n      {settings.type === 'documents' || settings.type === 'columns' ? (\n        children\n      ) : (\n        <Box />\n      )}\n    </Box>\n  )\n}\n","import * as React from 'react'\nimport { Typography, TypographyProps } from '@material-ui/core'\nimport {\n  parseISO,\n  isValid as isValidDate,\n  format as formatDate,\n} from 'date-fns'\nimport ReactJson from 'react-json-view'\n\ntype ValueProps = {\n  children: any\n  collapsed?: boolean | 1 | 2\n  named?: boolean\n} & TypographyProps\n\nexport default ({ children, collapsed, named, ...props }: ValueProps) => {\n  let value = children\n\n  if (value === undefined || value === null) {\n    return (\n      <Typography variant=\"overline\" {...props}>\n        null\n      </Typography>\n    )\n  }\n\n  if (typeof value === 'boolean') {\n    return (\n      <Typography variant=\"body2\" {...props}>\n        {value ? 'Yes' : 'No'}\n      </Typography>\n    )\n  }\n\n  if (typeof value === 'number' || typeof value === 'bigint') {\n    return (\n      <Typography variant=\"body2\" {...props}>\n        {value}\n      </Typography>\n    )\n  }\n\n  if (typeof value === 'string') {\n    try {\n      value = JSON.parse(children)\n    } catch {}\n  }\n\n  if (typeof value === 'object') {\n    return (\n      <ReactJson\n        src={value}\n        name={named ? value.name || value._id : false}\n        indentWidth={2}\n        collapsed={collapsed === undefined ? true : collapsed}\n        enableClipboard={false}\n        displayDataTypes={false}\n      />\n    )\n  }\n\n  const date = parseISO(value)\n  if (isValidDate(date)) {\n    value = formatDate(date, 'yyyy-MM-dd HH:mm:ss')\n  }\n\n  return (\n    <Typography\n      variant=\"body2\"\n      style={{\n        maxHeight: 98,\n        overflowY: 'auto',\n      }}\n      {...props}\n    >\n      {value}\n    </Typography>\n  )\n}\n","import * as React from 'react'\nimport {\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n} from '@material-ui/core'\nimport Value from '../Value'\nimport { ResultProps } from '.'\n\nexport type TableResultsProps = {\n  page: number\n  rowsPerPage: number\n}\n\ntype Props = TableResultsProps & ResultProps\n\nexport default React.memo(({ data, settings, page, rowsPerPage }: Props) => (\n  <TableContainer\n    className=\"scrollable\"\n    style={{ height: 'calc(100% - 50px)' }}\n  >\n    <Table stickyHeader>\n      {settings.type === 'columns' && (\n        <TableHead>\n          <TableRow>\n            {settings.columns.map((column: string) => (\n              <TableCell key={column}>{column}</TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n      )}\n      <TableBody>\n        {data\n          .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n          .map((row: any, idx: number) => (\n            <TableRow key={`row_${idx}`} hover>\n              {settings.type === 'columns' && settings.columns && (\n                <>\n                  {settings.columns.map((column: string) => (\n                    <TableCell\n                      key={`row_${idx}_column_${column}`}\n                      style={{ minWidth: 200 }}\n                    >\n                      <Value>{row[column]}</Value>\n                    </TableCell>\n                  ))}\n                </>\n              )}\n              {settings.type === 'documents' && (\n                <TableCell>\n                  <Value collapsed={1} named>\n                    {row}\n                  </Value>\n                </TableCell>\n              )}\n            </TableRow>\n          ))}\n      </TableBody>\n    </Table>\n  </TableContainer>\n))\n","import * as React from 'react'\nimport { Box } from '@material-ui/core'\nimport Value from '../Value'\nimport { ResultProps } from '.'\n\nexport default React.memo(({ data, settings }: ResultProps) => (\n  <Box\n    display=\"flex\"\n    flexDirection=\"row\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    height=\"calc(100% - 50px)\"\n  >\n    <Value gutterBottom variant=\"h2\">\n      {settings.key ? data[0][settings.key] : data[0]}\n    </Value>\n  </Box>\n))\n","import * as React from 'react'\nimport { Box } from '@material-ui/core'\nimport { AutoSizer } from 'react-virtualized'\nimport {\n  LineChart,\n  AreaChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Line,\n  Area,\n} from 'recharts'\nimport { ResultProps } from '.'\n\nexport default ({ data, settings }: ResultProps) => {\n  const ChartComponent = settings['chart.line'].asArea ? AreaChart : LineChart\n  const CurveComponent = settings['chart.line'].asArea ? Area : Line\n\n  return (\n    <Box pr={3} width=\"calc(100% - 16)\" height=\"calc(100% - 50px)\">\n      <AutoSizer>\n        {({ width, height }) => (\n          <ChartComponent width={width} height={height} data={data}>\n            {settings['chart.line'].asArea && (\n              <defs>\n                {settings['chart.line'].yAxis.map((yAxis: string) => (\n                  <linearGradient\n                    id={`color_${yAxis}`}\n                    x1=\"0\"\n                    y1=\"0\"\n                    x2=\"0\"\n                    y2=\"1\"\n                  >\n                    <stop\n                      offset=\"5%\"\n                      stopColor={settings['chart.line'].colors[yAxis]}\n                      stopOpacity={0.8}\n                    />\n                    <stop\n                      offset=\"95%\"\n                      stopColor={settings['chart.line'].colors[yAxis]}\n                      stopOpacity={0}\n                    />\n                  </linearGradient>\n                ))}\n              </defs>\n            )}\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={settings['chart.line'].xAxis} />\n            <YAxis />\n            <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n            <Legend />\n            {settings['chart.line'].yAxis.map((yAxis: string) => (\n              // @ts-ignore\n              <CurveComponent\n                key={yAxis}\n                type=\"monotone\"\n                dataKey={yAxis}\n                stroke={settings['chart.line'].colors[yAxis]}\n                fillOpacity={1}\n                fill={`url(#color_${yAxis})`}\n              />\n            ))}\n          </ChartComponent>\n        )}\n      </AutoSizer>\n    </Box>\n  )\n}\n","import * as React from 'react'\nimport { Box } from '@material-ui/core'\nimport { AutoSizer } from 'react-virtualized'\nimport {\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n} from 'recharts'\nimport { ResultProps } from '.'\n\nexport default ({ data, settings }: ResultProps) => (\n  <Box pr={3} width=\"calc(100% - 16)\" height=\"calc(100% - 50px)\">\n    <AutoSizer>\n      {({ width, height }) => (\n        <BarChart width={width} height={height} data={data}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey={settings['chart.bar'].xAxis} />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          {settings['chart.bar'].yAxis.map((yAxis: string) => (\n            <Bar\n              key={yAxis}\n              dataKey={yAxis}\n              fill={settings['chart.bar'].colors[yAxis]}\n            />\n          ))}\n        </BarChart>\n      )}\n    </AutoSizer>\n  </Box>\n)\n","import * as React from 'react'\nimport { Box } from '@material-ui/core'\nimport { AutoSizer } from 'react-virtualized'\nimport { PieChart, Tooltip, Pie, PolarGrid } from 'recharts'\nimport { ResultProps } from '.'\n\nconst STROKE_SIZE = 40\nconst SPACE_SIZE = 10\n\nexport default React.memo(({ data, settings }: ResultProps) => {\n  const nameKey = settings['chart.pie'].xAxis\n  const dataKeys = settings['chart.pie'].yAxis\n  const colors = settings['chart.pie'].colors\n\n  const typedData = data.map((datum: any) => {\n    const typedDatum = {\n      [nameKey]: datum[nameKey],\n    }\n    for (const dataKey of dataKeys) {\n      typedDatum[dataKey] = parseFloat(datum[dataKey])\n    }\n\n    return typedDatum\n  })\n\n  return (\n    <Box pr={3} width=\"calc(100% - 16)\" height=\"calc(100% - 50px)\">\n      <AutoSizer>\n        {({ width, height }) => (\n          <PieChart width={width} height={height}>\n            <PolarGrid strokeDasharray=\"5 5\" />\n            <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n            {dataKeys.map((dataKey: string, idx: number) => (\n              <Pie\n                key={dataKey}\n                data={typedData}\n                nameKey={nameKey}\n                dataKey={dataKey}\n                cx=\"50%\"\n                cy=\"50%\"\n                innerRadius={20 + idx * STROKE_SIZE + idx * SPACE_SIZE}\n                outerRadius={20 + (idx + 1) * STROKE_SIZE + idx * SPACE_SIZE}\n                fill={colors[dataKey]}\n              />\n            ))}\n          </PieChart>\n        )}\n      </AutoSizer>\n    </Box>\n  )\n})\n","import * as React from 'react'\nimport { Box } from '@material-ui/core'\nimport { AutoSizer } from 'react-virtualized'\nimport {\n  ScatterChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  ZAxis,\n  Tooltip,\n  Legend,\n  Scatter,\n} from 'recharts'\nimport { ResultProps } from '.'\n\nexport default ({ data, settings }: ResultProps) => {\n  const xKey = settings['chart.bubble'].xAxis\n  const yKey = settings['chart.bubble'].yAxis\n  const zKeys = settings['chart.bubble'].zAxis\n\n  const colors = settings['chart.bubble'].colors\n\n  const typedData = data.map((datum: any) => {\n    const typedDatum = {\n      [xKey]: datum[xKey],\n      [yKey]: datum[yKey],\n    }\n    for (const zKey of zKeys) {\n      typedDatum[zKey] = parseFloat(datum[zKey])\n    }\n\n    return typedDatum\n  })\n\n  console.log(typedData)\n  return (\n    <Box pr={3} width=\"calc(100% - 16)\" height=\"calc(100% - 50px)\">\n      <AutoSizer>\n        {({ width, height }) => (\n          <ScatterChart width={width} height={height} data={data}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey={xKey} name={xKey} />\n            <YAxis dataKey={yKey} name={yKey} />\n            <ZAxis dataKey=\"__Z VALUE CUSTON NAMED__\" name=\"value\" />\n            <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n            <Legend />\n            {zKeys.map((zAxis: string) => (\n              <Scatter\n                key={zAxis}\n                name={zAxis}\n                dataKey={zAxis}\n                fill={colors[zAxis]}\n              />\n            ))}\n          </ScatterChart>\n        )}\n      </AutoSizer>\n    </Box>\n  )\n}\n","import * as React from 'react'\n\nimport TableResult from './TableResult'\nimport ScalarResult from './ScalarResult'\nimport LineChartResult from './LineChartResult'\nimport BarChartResult from './BarChartResult'\nimport PieChartResult from './PieChartResult'\nimport BubbleChartResult from './BubbleChartResult'\n\ntype MinimalResultProps = {\n  data: any\n  settings: any\n}\nexport type ResultProps = MinimalResultProps & any\n\nexport default React.memo(({ data, settings, ...tableProps }: ResultProps) => {\n  switch (settings.type) {\n    case 'scalar': {\n      return <ScalarResult data={data} settings={settings} />\n    }\n\n    case 'chart.line': {\n      return <LineChartResult data={data} settings={settings} />\n    }\n\n    case 'chart.bar': {\n      return <BarChartResult data={data} settings={settings} />\n    }\n\n    case 'chart.pie': {\n      return <PieChartResult data={data} settings={settings} />\n    }\n\n    case 'chart.bubble': {\n      return <BubbleChartResult data={data} settings={settings} />\n    }\n\n    default: {\n      return <TableResult data={data} settings={settings} {...tableProps} />\n    }\n  }\n})\n","import * as React from 'react'\nimport { TablePagination, Box, Paper } from '@material-ui/core'\nimport { useTheme } from '@material-ui/core/styles'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\nimport { useResult, useQuestionSettings } from '../../hooks'\nimport Footer from './Footer'\nimport Result from './Result'\nimport { usePagination } from '../../hooks'\nimport { NOOP } from '../../utils'\n\ntype Props = {\n  execution: any\n  settings: any\n  driver: string\n  editable?: boolean\n  requestVisualTypeChange?: (type: string, settings: any) => void\n  openVisualSettingsForm?: () => void\n  onResultUpdate?: (result: any) => void\n}\n\nexport default React.memo(\n  ({\n    execution: initialExecution,\n    settings: predefinedSettings,\n    driver,\n    editable,\n    requestVisualTypeChange,\n    openVisualSettingsForm,\n    onResultUpdate,\n  }: Props) => {\n    const theme = useTheme()\n    const isXS = useMediaQuery(theme.breakpoints.down('sm'))\n\n    const { loading, error, result, execution, setExecution } = useResult(\n      onResultUpdate || NOOP\n    )\n\n    const {\n      page,\n      rowsPerPage,\n      rowsPerPageOptions,\n      handleChangePage,\n      handleChangeRowsPerPage,\n    } = usePagination()\n\n    React.useEffect(() => {\n      if (\n        initialExecution &&\n        (!execution || initialExecution._id !== execution._id)\n      ) {\n        setExecution(initialExecution)\n      }\n    }, [initialExecution, setExecution, execution])\n\n    const settings = useQuestionSettings(predefinedSettings, result)\n\n    return (\n      <>\n        {loading && <span>Loading</span>}\n        {error && <span>Error</span>}\n        {result && (\n          <Box p={1} height=\"100%\">\n            <Paper style={{ height: '100%' }}>\n              <Result\n                data={result.data}\n                settings={settings}\n                page={page}\n                rowsPerPage={rowsPerPage}\n              />\n              <TablePagination\n                rowsPerPageOptions={rowsPerPageOptions}\n                component={({ children, ...props }) => (\n                  <Footer\n                    execution={execution}\n                    settings={settings}\n                    driver={driver}\n                    editable={editable || false}\n                    requestVisualTypeChange={requestVisualTypeChange || NOOP}\n                    openVisualSettingsForm={openVisualSettingsForm || NOOP}\n                    {...props}\n                  >\n                    {children}\n                  </Footer>\n                )}\n                count={result.data.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                labelRowsPerPage={isXS ? null : undefined}\n                labelDisplayedRows={isXS ? ({ page: pabeNumber }) => pabeNumber + 1 : undefined}\n              />\n            </Paper>\n          </Box>\n        )}\n      </>\n    )\n  }\n)\n","import * as React from 'react'\n\nexport const usePagination = () => {\n  const rowsPerPageOptions = [10, 25, 50]\n  const [page, setPage] = React.useState(0)\n  const [rowsPerPage, setRowsPerPage] = React.useState(10)\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setRowsPerPage(parseInt(event.target.value, rowsPerPageOptions[0]))\n    setPage(0)\n  }\n\n  return {\n    page,\n    rowsPerPage,\n    rowsPerPageOptions,\n    handleChangePage,\n    handleChangeRowsPerPage,\n  }\n}\n","import * as React from 'react'\nimport { Grid, Button, Popover } from '@material-ui/core'\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked'\nimport { BlockPicker } from 'react-color'\n\nexport const ColorIcon = ({\n  color,\n  size,\n}: {\n  color: string\n  size?: 'small'\n}) => {\n  const iconStyle = color ? { fill: color, marginLeft: 6 } : undefined\n  return <RadioButtonCheckedIcon style={iconStyle} fontSize={size} />\n}\n\ntype ColorPickerProps = {\n  column: string\n  color: string\n  onChange: (color: string) => void\n}\n\nexport default ({ column, color, onChange }: ColorPickerProps) => {\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null)\n\n  const buttonStyle = color ? { borderColor: color, color } : undefined\n\n  return (\n    <Grid item className=\"clickable\">\n      <Button\n        style={buttonStyle}\n        startIcon={<ColorIcon color={color} />}\n        variant=\"outlined\"\n        color=\"default\"\n        onClick={(event) => setAnchorEl(event.currentTarget)}\n      >\n        {column}\n      </Button>\n      <Popover\n        open={!!anchorEl}\n        anchorEl={anchorEl}\n        onClose={() => setAnchorEl(null)}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <BlockPicker\n          color={color}\n          onChangeComplete={({ hex }) => {\n            onChange(hex)\n            setAnchorEl(null)\n          }}\n        />\n      </Popover>\n    </Grid>\n  )\n}\n","import * as React from 'react'\nimport { RouteProps, Route, Redirect } from 'react-router-dom'\nimport { useUser, User } from '../hooks'\n\nconst hasAtLeastOneRole = (user?: User, roles?: string[]) => {\n  if (!user) return false\n  if (!roles) return true\n  if (!user.roles) return false\n\n  const sortedUserRoles = user.roles.sort()\n  const sortedRoles = user.roles.sort()\n\n  for (let i = 0; i < Math.min(user.roles.length, roles.length); i++) {\n    if (sortedUserRoles[i] === sortedRoles[i]) {\n      return true\n    }\n  }\n\n  return false\n}\n\ntype SubComponentType = React.ComponentType<any>\ntype ProtectedRouteProps = {\n  component: SubComponentType\n  roles?: string[]\n} & RouteProps\n\nexport default ({ component, roles, ...props }: ProtectedRouteProps) => {\n  const { user } = useUser()\n  const RouteComponent = component\n\n  return (\n    <Route\n      {...props}\n      exact\n      render={(routeProps) =>\n        hasAtLeastOneRole(user, roles) ? (\n          <RouteComponent {...routeProps} />\n        ) : (\n          <Redirect to=\"/\" />\n        )\n      }\n    />\n  )\n}\n","import * as React from 'react'\nimport {\n  Container,\n  Box,\n  Table,\n  TableCell,\n  TableContainer,\n  Paper,\n  TableHead,\n  TableRow,\n  TableBody,\n} from '@material-ui/core'\nimport { useHistory } from 'react-router-dom'\nimport { QuestionLastRun } from '../../components'\nimport { useQuestions } from '../../hooks'\n\nexport default () => {\n  const history = useHistory()\n  const { loading, error, questions } = useQuestions()\n\n  return (\n    <Container>\n      {loading && <h1>Loading</h1>}\n      {error && <h1>Error</h1>}\n      {questions && (\n        <Box m={1}>\n          <TableContainer component={Paper}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Name</TableCell>\n                  <TableCell>Connection</TableCell>\n                  <TableCell />\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {questions.map((question: any) => (\n                  <TableRow\n                    key={question._id}\n                    hover\n                    classes={{ hover: 'clickable' }}\n                    onClick={() => history.push(`/questions/${question._id}`)}\n                  >\n                    <TableCell>{question.name}</TableCell>\n                    <TableCell>\n                      {question.connection && question.connection.name}\n                    </TableCell>\n                    <TableCell align=\"center\">\n                      <QuestionLastRun question={question} />\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Box>\n      )}\n    </Container>\n  )\n}\n","import * as React from 'react'\nimport {\n  Box,\n  Grid,\n  Typography,\n  ButtonGroup,\n  Button,\n  LinearProgress,\n} from '@material-ui/core'\nimport PlayIcon from '@material-ui/icons/PlayArrow'\nimport SaveIcon from '@material-ui/icons/Save'\n\ntype ToolbarProps = {\n  title: string\n  subtitle: string\n  modified?: boolean\n  waiting?: boolean\n  runQuery: () => void\n  saveQuery: () => void\n}\nexport default React.memo(\n  ({\n    title,\n    subtitle,\n    modified,\n    waiting,\n    runQuery,\n    saveQuery,\n  }: ToolbarProps) => (\n    <Box ml={1} mr={1}>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        alignItems=\"center\"\n      >\n        <Grid item>\n          <Typography variant=\"h5\">{title}</Typography>\n          <Typography variant=\"caption\">{subtitle}</Typography>\n        </Grid>\n        <Grid item>\n          <ButtonGroup color=\"primary\">\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              size=\"small\"\n              startIcon={<PlayIcon />}\n              onClick={runQuery}\n            >\n              Run\n            </Button>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              size=\"small\"\n              startIcon={<SaveIcon />}\n              disabled={!modified}\n              onClick={saveQuery}\n            >\n              Save\n            </Button>\n          </ButtonGroup>\n        </Grid>\n        {/* <Grid item>\n        <ButtonGroup color=\"primary\">\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            size=\"small\"\n            startIcon={<EditIcon />}\n            onClick={() => {}}\n          >\n            Edit\n          </Button>\n        </ButtonGroup>\n      </Grid> */}\n      </Grid>\n      {waiting && <LinearProgress />}\n    </Box>\n  )\n)\n","import * as React from 'react'\nimport { Box, Paper } from '@material-ui/core'\nimport MonacoEditor from 'react-monaco-editor'\nimport { AutoSizer } from 'react-virtualized'\n\ntype Props = {\n  query: string\n  driver: string\n  onChange: (query: any) => void\n}\n\nconst getLanguageFromDriver = (driver: string) => {\n  if (driver === 'mongodb') {\n    return 'javascript'\n  }\n\n  return 'sql'\n}\n\nexport default React.memo(({ query, driver, onChange }: Props) => {\n  const language = React.useMemo(() => getLanguageFromDriver(driver), [driver])\n  return (\n    <Box p={1} height=\"100%\">\n      <Paper style={{ height: '100%' }}>\n        <AutoSizer>\n          {({ width, height }) => (\n            <MonacoEditor\n              width={width}\n              height={height}\n              language={language}\n              theme=\"vs-light\"\n              value={query || ''}\n              options={{\n                selectOnLineNumbers: true,\n              }}\n              onChange={onChange}\n              editorDidMount={() => {}}\n            />\n          )}\n        </AutoSizer>\n      </Paper>\n    </Box>\n  )\n})\n","import * as React from 'react'\nimport {\n  Box,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  Input,\n  Chip,\n  MenuItem,\n  Typography,\n  Grid,\n  DialogContentText,\n  FormControlLabel,\n  Checkbox,\n} from '@material-ui/core'\nimport { ColorPicker, ColorIcon } from '../../components'\n\nconst TYPE_NAMES: any = {\n  'chart.line': 'Line chart',\n  'chart.bar': 'Bar chart',\n  'chart.pie': 'Pie chart',\n  'chart.bubble': 'Bubblee chart',\n  documents: 'Documents',\n  columns: 'Table',\n}\n\nconst X_AXIS_LABEL: any = {\n  'chart.line': 'X-Axis',\n  'chart.bar': 'X-Axis',\n  'chart.bubble': 'X-Axis',\n  'chart.pie': 'Categories',\n}\n\nconst Y_AXIS_LABEL: any = {\n  'chart.line': 'Y-Axis (multiple)',\n  'chart.bar': 'Y-Axis (multiple)',\n  'chart.bubble': 'Y-Axis',\n  'chart.pie': 'Values',\n}\n\ntype ChartFormProps = {\n  values?: any\n  columns?: string[]\n  type: string\n  onChange: (field: string, value: any) => void\n}\nconst ChartForm = ({ values, columns, type, onChange }: ChartFormProps) => {\n  const xAxisValue = values.xAxis || ''\n  const yAxisValue = values.yAxis || (type === 'chart.bubble' ? '' : [])\n  const zAxisValue = values.zAxis || []\n  const coloredAxis = type === 'chart.bubble' ? zAxisValue : yAxisValue\n\n  const renderYAxisValue = (selected: any) =>\n    selected.map((value: string) => (\n      <Chip\n        key={value}\n        label={value}\n        icon={<ColorIcon color={values.colors[value]} size=\"small\" />}\n      />\n    ))\n\n  return (\n    <>\n      <FormControl fullWidth>\n        <InputLabel id=\"x-axis-select-label\">{X_AXIS_LABEL[type]}</InputLabel>\n        <Select\n          labelId=\"x-axis-select-label\"\n          id=\"x-axis-select\"\n          value={xAxisValue}\n          onChange={({ target: { value } }) =>\n            onChange('xAxis', value as string)\n          }\n          input={<Input id=\"x-axis-select-input\" />}\n        >\n          {columns &&\n            columns.map((column: string) => (\n              <MenuItem key={column} value={column}>\n                {column}\n              </MenuItem>\n            ))}\n        </Select>\n      </FormControl>\n      <FormControl fullWidth>\n        <InputLabel id=\"y-axis-select-label\">{Y_AXIS_LABEL[type]}</InputLabel>\n        <Select\n          labelId=\"y-axis-select-label\"\n          id=\"y-axis-select\"\n          multiple={type !== 'chart.bubble'}\n          value={yAxisValue}\n          onChange={({ target: { value } }) => onChange('yAxis', value)}\n          input={<Input id=\"y-axis-select-input\" />}\n          renderValue={(selected: any) =>\n            Array.isArray(selected) ? renderYAxisValue(selected) : [selected]\n          }\n        >\n          {columns &&\n            columns.map((column: string) => (\n              <MenuItem key={column} value={column}>\n                {column}\n              </MenuItem>\n            ))}\n        </Select>\n      </FormControl>\n      {type === 'chart.bubble' && (\n        <FormControl fullWidth>\n          <InputLabel id=\"z-axis-select-label\">Z-Axis</InputLabel>\n          <Select\n            labelId=\"z-axis-select-label\"\n            id=\"z-axis-select\"\n            multiple\n            value={zAxisValue}\n            onChange={({ target: { value } }) =>\n              onChange('zAxis', value as string[])\n            }\n            input={<Input id=\"z-axis-select-input\" />}\n            renderValue={(selected) =>\n              (selected as string[]).map((value) => (\n                <Chip\n                  key={value}\n                  label={value}\n                  icon={<ColorIcon color={values.colors[value]} size=\"small\" />}\n                />\n              ))\n            }\n          >\n            {columns &&\n              columns.map((column: string) => (\n                <MenuItem key={column} value={column}>\n                  {column}\n                </MenuItem>\n              ))}\n          </Select>\n        </FormControl>\n      )}\n      {type === 'chart.line' && (\n        <FormControl fullWidth>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={values.asArea || false}\n                color=\"primary\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                  onChange('asArea', event.target.checked)\n                }\n              />\n            }\n            label=\"Show area under the curve\"\n          />\n        </FormControl>\n      )}\n      <Box mt={3}>\n        <Typography variant=\"caption\">Colors:</Typography>\n        <Grid container spacing={3}>\n          {coloredAxis &&\n            coloredAxis.map((column: string) => (\n              <ColorPicker\n                key={column}\n                column={column}\n                color={values.colors[column]}\n                onChange={(color) =>\n                  onChange('colors', { ...values.colors, [column]: color })\n                }\n              />\n            ))}\n        </Grid>\n      </Box>\n    </>\n  )\n}\n\nconst areVisualSettingsValid = (settings: any, type: string) => {\n  if (type === 'documents' || type === 'columns') {\n    return true\n  }\n\n  if (type === 'chart.line' || type === 'chart.bar' || type === 'chart.pie') {\n    const typeSettings = settings[type]\n    if (!typeSettings) {\n      return false\n    }\n\n    if (!typeSettings.xAxis) {\n      return false\n    }\n\n    if (!typeSettings.yAxis) {\n      return false\n    }\n  }\n\n  return true\n}\n\ntype Props = {\n  open: boolean\n  onClose: () => void\n  settings: any\n  type: string\n  onSubmit: (settings: any) => void\n}\n\nexport default React.memo(\n  ({ open, onClose, settings: initialSettings, type, onSubmit }: Props) => {\n    const [settings, setSettings] = React.useState()\n    React.useEffect(() => {\n      setSettings(initialSettings)\n    }, [initialSettings])\n\n    const updateSettings = (field: string, value: any) => {\n      const updatedSettings: any = {\n        ...settings[type],\n        colors: { ...(settings[type] ? settings[type].colors : undefined) },\n      }\n\n      updatedSettings[field] = value\n\n      if (field === 'yAxis') {\n        const colors = updatedSettings.colors\n        for (const yAxis of value) {\n          if (!colors[yAxis]) {\n            colors[yAxis] = '#22194d'\n          }\n        }\n\n        for (const coloredColumn of Object.keys(colors)) {\n          if (value.indexOf(coloredColumn) === -1) {\n            delete colors[coloredColumn]\n          }\n        }\n      }\n\n      setSettings({\n        ...settings,\n        [type]: updatedSettings,\n      })\n    }\n\n    if (!settings) {\n      return null\n    }\n\n    const isValid = areVisualSettingsValid(settings, type)\n    const values = settings[type] || {}\n    return (\n      <Dialog open={open} onClose={onClose}>\n        <DialogTitle>\n          Configure {TYPE_NAMES[type]} view for the question\n        </DialogTitle>\n        <DialogContent>\n          {(type === 'documents' || type === 'columns') && (\n            <DialogContentText>\n              Results will be shown as a list of rows\n            </DialogContentText>\n          )}\n          {type.startsWith('chart.') && (\n            <ChartForm\n              values={values}\n              columns={settings.columns}\n              onChange={updateSettings}\n              type={type}\n            />\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button\n            onClick={(e) => {\n              if (onClose) {\n                onClose()\n              }\n            }}\n            color=\"secondary\"\n          >\n            Cancel\n          </Button>\n          <Button\n            color=\"primary\"\n            disabled={!isValid}\n            onClick={() => onSubmit(settings)}\n          >\n            Apply\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n)\n","import * as React from 'react'\nimport { useHistory, useLocation, useRouteMatch } from 'react-router-dom'\nimport { Box } from '@material-ui/core'\nimport { QuestionResultCard } from '../../components'\nimport { useQuestion } from '../../hooks'\nimport Toolbar from './Toolbar'\nimport QueryEditor from './QueryEditor'\nimport VisualSettingsForm from './VisualSettingsForm'\n\nexport default () => {\n  const history = useHistory()\n  const location = useLocation<{ title?: string }>()\n  const match = useRouteMatch<{ question_id: string }>()\n  const { question_id } = match.params\n\n  const {\n    loading,\n    error,\n    question,\n    execution,\n    waiting,\n    save,\n    run,\n    updateSettings,\n  } = useQuestion(question_id)\n  const [modified, setModified] = React.useState(false)\n  const [query, setQuery] = React.useState('')\n  const [settings, setSettings] = React.useState()\n  const [visualType, setVisualType] = React.useState<string>()\n  const [isVisualSettingsFormOpen, setVisualSettingsFormOpen] = React.useState(\n    false\n  )\n\n  React.useEffect(() => {\n    if (question && !query) {\n      setQuery(question.query)\n    }\n    if (question && !settings) {\n      setSettings(question.visualSettings)\n      setVisualType(question.visualSettings.type)\n    }\n    if (question && question.query === query) {\n      setModified(false)\n    }\n  }, [question, query, settings])\n\n  if (question && (!location.state || !location.state.title)) {\n    history.replace(location.pathname, { title: question.name })\n  }\n\n  const handleQueryChange = (newQuery: string) => {\n    setQuery(newQuery)\n    if (!modified) {\n      setModified(true)\n    }\n  }\n\n  const handleVisualTypeChange = (type: string, currentSettings: any) => {\n    setVisualType(type)\n    setSettings(currentSettings)\n    setVisualSettingsFormOpen(true)\n  }\n\n  const updateQuestionSettings = async (updatedSettings: any) => {\n    const newSettings = {\n      ...updatedSettings,\n    }\n    newSettings.type = visualType\n    setSettings(newSettings)\n    updateSettings(newSettings)\n    setVisualSettingsFormOpen(false)\n  }\n\n  const saveQuery = () => save(query)\n  const runQuery = () => run(query)\n\n  return (\n    <>\n      {loading && <h1>Loading</h1>}\n      {error && <h1>Error</h1>}\n      {question && (\n        <Box m={1}>\n          <Toolbar\n            title={question.name}\n            subtitle={question.connection.name}\n            modified={modified}\n            waiting={waiting}\n            runQuery={runQuery}\n            saveQuery={saveQuery}\n          />\n          <Box mt={1} height=\"calc((100vh - 160px) * 1/3)\">\n            <QueryEditor\n              query={query}\n              driver={question.connection.driver}\n              onChange={handleQueryChange}\n            />\n          </Box>\n          {execution && (\n            <Box mt={1} height=\"calc((100vh - 160px) * 2/3)\">\n              <QuestionResultCard\n                execution={execution}\n                driver={question.connection.driver}\n                settings={settings}\n                requestVisualTypeChange={handleVisualTypeChange}\n                openVisualSettingsForm={() => {\n                  setVisualType(settings ? settings.type : undefined)\n                  setVisualSettingsFormOpen(true)\n                }}\n                editable\n                onResultUpdate={(result: any) =>\n                  setSettings({\n                    ...settings,\n                    columns: result.columns,\n                  })\n                }\n              />\n            </Box>\n          )}\n          <VisualSettingsForm\n            open={isVisualSettingsFormOpen}\n            onClose={() => setVisualSettingsFormOpen(false)}\n            onSubmit={updateQuestionSettings}\n            settings={settings}\n            type={visualType || ''}\n          />\n        </Box>\n      )}\n    </>\n  )\n}\n","import * as React from 'react'\nimport {\n  Container,\n  Box,\n  Table,\n  TableCell,\n  TableContainer,\n  Paper,\n  TableHead,\n  TableRow,\n  TableBody,\n} from '@material-ui/core'\nimport { useHistory } from 'react-router-dom'\nimport { useDashboards } from '../../hooks'\n\nexport default () => {\n  const history = useHistory()\n  const { loading, error, dashboards } = useDashboards()\n\n  return (\n    <Container>\n      {loading && <h1>Loading</h1>}\n      {error && <h1>Error</h1>}\n      {dashboards && (\n        <Box m={1}>\n          <TableContainer component={Paper}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Name</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {dashboards.map((dashboard: any) => (\n                  <TableRow\n                    key={dashboard._id}\n                    hover\n                    classes={{ hover: 'clickable' }}\n                    onClick={() => history.push(`/dashboards/${dashboard._id}`)}\n                  >\n                    <TableCell>{dashboard.name}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Box>\n      )}\n    </Container>\n  )\n}\n","import { useQuery } from 'react-fetching-library'\nimport { fetchDashboardsAction, fetchDashboardAction } from '../service'\n\nexport const useDashboards = () => {\n  const { payload, ...useQueryReturn } = useQuery(fetchDashboardsAction)\n\n  return {\n    ...useQueryReturn,\n    dashboards:\n      useQueryReturn.loading || useQueryReturn.error\n        ? undefined\n        : payload || [],\n  }\n}\n\nexport const useDashboard = (dashboardId: string) => {\n  const { loading, error, payload: dashboard } = useQuery(\n    fetchDashboardAction(dashboardId)\n  )\n\n  return {\n    loading,\n    error,\n    dashboard,\n  }\n}\n","import * as React from 'react'\nimport { useHistory, useLocation, useRouteMatch } from 'react-router-dom'\nimport { Box, Link, Grid, Typography } from '@material-ui/core'\nimport { useTheme } from '@material-ui/core/styles'\nimport { useDashboard, useQuestion } from '../../hooks'\nimport { QuestionResultCard } from '../../components'\n\ntype TileProps = {\n  questionId: string\n}\n\nconst Tile = ({ questionId }: TileProps) => {\n  const {\n    loading,\n    error,\n    question,\n    execution,\n    waiting,\n    errorWaiting,\n    run,\n  } = useQuestion(questionId)\n\n  if (!question) return null\n\n  return (\n    <Box height={300}>\n      <Link href={`/questions/${question._id}`}>\n        <Box ml={1}>\n          <Typography variant=\"h6\">{question.name}</Typography>\n        </Box>\n      </Link>\n      <QuestionResultCard\n        execution={execution}\n        settings={question.visualSettings}\n        driver={question.connection.driver}\n      />\n    </Box>\n  )\n}\n\nexport default () => {\n  const history = useHistory()\n  const location = useLocation<{ title?: string }>()\n  const match = useRouteMatch<{ dashboard_id: string }>()\n  const theme = useTheme()\n\n  const { dashboard_id } = match.params\n\n  const { loading, error, dashboard } = useDashboard(dashboard_id)\n\n  if (dashboard && (!location.state || !location.state.title)) {\n    history.replace(location.pathname, { title: dashboard.name })\n  }\n\n  return (\n    <>\n      {loading && <h1>Loading</h1>}\n      {error && <h1>Error</h1>}\n      {dashboard && (\n        <Box width=\"100%\" m={1}>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-evenly\"\n            align-items=\"center\"\n            wrap=\"wrap\"\n          >\n            {dashboard.questions.map((questionId: string) => (\n              <Box width={`min(${theme.breakpoints.values.sm}px, 100%)`} mb={6}>\n                <Grid key={questionId} item>\n                  <Tile questionId={questionId} />\n                </Grid>\n              </Box>\n            ))}\n          </Grid>\n        </Box>\n      )}\n    </>\n  )\n}\n","import * as React from 'react'\nimport { useUser } from '../../hooks'\nimport { useHistory } from 'react-router-dom'\n\nexport default () => {\n  const { user } = useUser()\n  const history = useHistory()\n\n  if (user) {\n    history.push('/home')\n    return null\n  }\n\n  return <h1>Landing</h1>\n}\n","import * as React from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { createClient, ClientContextProvider } from 'react-fetching-library'\nimport { requestHostInterceptor } from './service'\nimport {\n  Home,\n  Admin,\n  Connections,\n  Questions,\n  Question,\n  Dashboards,\n  Dashboard,\n  Landing,\n} from './pages'\nimport { Header, ProtectedRoute, UserProvider } from './components'\n\nconst client = createClient({\n  requestInterceptors: [requestHostInterceptor],\n})\n\nexport default () => (\n  <ClientContextProvider client={client}>\n    <Router>\n      <UserProvider>\n        <Header />\n        <Switch>\n          <ProtectedRoute path=\"/home\" component={Home} />\n          <ProtectedRoute\n            path=\"/dashboards/:dashboard_id\"\n            component={Dashboard}\n          />\n          <ProtectedRoute path=\"/dashboards\" component={Dashboards} />\n          <ProtectedRoute path=\"/questions/:question_id\" component={Question} />\n          <ProtectedRoute path=\"/questions\" component={Questions} />\n          <ProtectedRoute path=\"/admin/connections\" component={Connections} />\n          <ProtectedRoute path=\"/admin\" component={Admin} />\n          <Route path=\"/\" component={Landing} />\n        </Switch>\n      </UserProvider>\n    </Router>\n  </ClientContextProvider>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n// @ts-ignore\nimport JavascriptTimeAgo from 'javascript-time-ago'\n// @ts-ignore\nimport en from 'javascript-time-ago/locale/en'\n\nJavascriptTimeAgo.locale(en)\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}